{"version":3,"sources":["viz/Client.js","viz/createNetSim.js","components/Graph.js","components/Controls.js","components/Ledger.js","components/Sandbox.js","components/SandboxOne/Graph.js","components/SandboxOne/Controls.js","components/SandboxOne/Ledger.js","components/SandboxOne/SandboxOne.js","components/SandboxTwo/Graph.js","components/SandboxTwo/Controls.js","components/SandboxTwo/Ledger.js","components/SandboxTwo/SandboxTwo.js","components/SandboxThree/Graph.js","components/SandboxThree/Controls.js","components/SandboxThree/Ledger.js","components/SandboxThree/SandboxThree.js","components/SandboxFour/Graph.js","components/SandboxFour/Controls.js","components/SandboxFour/Ledger.js","components/SandboxFour/SandboxFour.js","components/SandboxFive/Graph.js","components/SandboxFive/SandboxFive.js","components/App.js","registerServiceWorker.js","index.js","components/SandboxFive/Paypal.js","components/SandboxFive/networksim.js","components/SandboxFour/Paypal.js","components/SandboxFour/networksim.js","components/SandboxThree/Paypal.js","components/SandboxThree/networksim.js","components/SandboxTwo/Paypal.js","components/SandboxTwo/networksim.js","components/SandboxOne/Paypal.js","components/SandboxOne/networksim.js","components/SandboxFive/createNetSim.js","viz/Paypal.js","viz/networksim.js","components/SandboxThree/createNetSim.js","components/SandboxOne/createNetSim.js","components/SandboxTwo/createNetSim.js","components/SandboxFour/createNetSim.js","components/SandboxFive/Client.js","components/SandboxFour/Client.js","components/SandboxThree/Client.js","components/SandboxTwo/Client.js","components/SandboxOne/Client.js"],"names":["EthCrypto","__webpack_require__","Client","network","_classCallCheck","this","wallet","createIdentity","nonce","pid","address","data","dataStr","JSON","stringify","hash","keccak256","message","messageHash","toHash","sign","privateKey","signature","recover","to","amount","type","unsignedTx","from","contents","sig","module","exports","NetworkSimulator","Paypal","nodes","paypal","peers","push","i","connectToPaypal","console","log","tx","generateTx","applyTransaction","length","tx1","broadcastTo","run","state","dragLine","mousedownNode","d3","on","d","fx","x","fy","y","mousemove","attr","mouseup","classed","slash","e","graph","createdLink","linkCreated","enterNode","selection","append","img","color","insert","text","emoji","updateNode","enterLink","source","target","updateLink","enterMessage","getNodeById","sender","id","find","node","getMsgPos","msg","coord","progress","time","sentTime","recvTime","recCoord","recipient","sentCoord","Graph_updateMessage","transition","duration","ease","exitMessage","size","badSpend","components_Graph","viz","d3Graph","nextProps","props","onClick","svg","d3Nodes","selectAll","enter","call","exit","remove","d3Links","links","d3Messages","messages","msgEnter","merge","_this","react_default","a","createElement","ref","el","width","height","react","components_Controls","_ref","spend","disabled","Button","className","components_Ledger","users","Object","keys","filter","shift","linked","usernames","balances","map","balance","_step","_iterator","createNetSim","Symbol","iterator","_iteratorNormalCompletion","next","done","Sandbox_node","value","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","undefined","_step3","_iterator3","err","return","components_Sandbox","Sandbox","Sandbox_classCallCheck","Sandbox_possibleConstructorReturn","Sandbox_getPrototypeOf","speed","timer","tick","bind","currNetwork","oldQ","messageQueue","forEach","key","index","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","newMsg","setMessageQueue","setState","nodeId","agents","currNode","getCurrNode","broadcast","_this$state","Graph_nodes","Graph_graph","Graph_enterNode","Graph_updateNode","Graph_enterLink","Graph_updateLink","Graph_enterMessage","Graph_getNodeById","Graph_getMsgPos","SandboxOne_Graph_updateMessage","Graph_exitMessage","SandboxOne_Graph","SandboxOne_Controls","SandboxOne_Ledger","SandboxOne_data","SandboxOne_step","SandboxOne_iterator","SandboxOne_createNetSim","SandboxOne_iteratorNormalCompletion","SandboxOne_node","SandboxOne_iteratorNormalCompletion3","SandboxOne_didIteratorError3","SandboxOne_iteratorError3","SandboxOne_step3","SandboxOne_iterator3","SandboxOne_peer","components_SandboxOne_SandboxOne","SandboxOne","SandboxOne_classCallCheck","SandboxOne_possibleConstructorReturn","SandboxOne_getPrototypeOf","randomSpend","Math","floor","random","receiver","SandboxOne_objectSpread","Graph_dragLine","SandboxTwo_Graph_nodes","Graph_mousedownNode","Graph_mousemove","Graph_mouseup","SandboxTwo_Graph_graph","SandboxTwo_Graph_enterNode","bigX","SandboxTwo_Graph_updateNode","SandboxTwo_Graph_enterLink","SandboxTwo_Graph_updateLink","SandboxTwo_Graph_enterMessage","SandboxTwo_Graph_getNodeById","SandboxTwo_Graph_getMsgPos","SandboxTwo_Graph_updateMessage","SandboxTwo_Graph_exitMessage","SandboxTwo_Graph","SandboxTwo_Controls","SandboxTwo_Ledger","SandboxTwo_data","SandboxTwo_step","SandboxTwo_iterator","SandboxTwo_createNetSim","SandboxTwo_iteratorNormalCompletion","SandboxTwo_node","SandboxTwo_iteratorNormalCompletion3","SandboxTwo_didIteratorError3","SandboxTwo_iteratorError3","SandboxTwo_step3","SandboxTwo_iterator3","SandboxTwo_peer","SandboxTwo","SandboxTwo_classCallCheck","SandboxTwo_possibleConstructorReturn","SandboxTwo_getPrototypeOf","SandboxTwo_objectSpread","SandboxThree_Graph_nodes","SandboxThree_Graph_graph","SandboxThree_Graph_enterNode","SandboxThree_Graph_updateNode","SandboxThree_Graph_enterLink","SandboxThree_Graph_updateLink","SandboxThree_Graph_enterMessage","SandboxThree_Graph_getNodeById","SandboxThree_Graph_getMsgPos","SandboxThree_Graph_updateMessage","SandboxThree_Graph_exitMessage","SandboxThree_Graph","SandboxThree_Controls","SandboxThree_Ledger","SandboxThree_data","SandboxThree_step","SandboxThree_iterator","SandboxThree_createNetSim","SandboxThree_iteratorNormalCompletion","SandboxThree_node","SandboxThree_iteratorNormalCompletion3","SandboxThree_didIteratorError3","SandboxThree_iteratorError3","SandboxThree_step3","SandboxThree_iterator3","SandboxThree_peer","components_SandboxThree_SandboxThree","SandboxThree","SandboxThree_classCallCheck","SandboxThree_possibleConstructorReturn","SandboxThree_getPrototypeOf","SandboxThree_objectSpread","SandboxFour_Graph_nodes","SandboxFour_Graph_graph","Graph_minted","SandboxFour_Graph_enterNode","SandboxFour_Graph_updateNode","SandboxFour_Graph_enterLink","SandboxFour_Graph_updateLink","SandboxFour_Graph_enterMessage","SandboxFour_Graph_getNodeById","SandboxFour_Graph_getMsgPos","SandboxFour_Graph_updateMessage","SandboxFour_Graph_exitMessage","SandboxFour_Graph","minted","SandboxFour_Controls","SandboxFour_Ledger","SandboxFour_data","SandboxFour_step","SandboxFour_iterator","SandboxFour_createNetSim","SandboxFour_iteratorNormalCompletion","SandboxFour_node","SandboxFour_iteratorNormalCompletion3","SandboxFour_didIteratorError3","SandboxFour_iteratorError3","SandboxFour_step3","SandboxFour_iterator3","SandboxFour_peer","SandboxFour","SandboxFour_classCallCheck","SandboxFour_possibleConstructorReturn","SandboxFour_getPrototypeOf","SandboxFour_objectSpread","mint","SandboxFive_Graph_nodes","SandboxFive_Graph_enterNode","SandboxFive_Graph_updateNode","SandboxFive_Graph_enterLink","SandboxFive_Graph_updateLink","SandboxFive_Graph_enterMessage","SandboxFive_Graph_getNodeById","SandboxFive_Graph_getMsgPos","SandboxFive_Graph_updateMessage","SandboxFive_Graph_exitMessage","SandboxFive_Graph","SandboxFive_data","SandboxFive_step","SandboxFive_iterator","SandboxFive_createNetSim","SandboxFive_iteratorNormalCompletion","SandboxFive_node","SandboxFive_iteratorNormalCompletion3","SandboxFive_didIteratorError3","SandboxFive_iteratorError3","SandboxFive_step3","SandboxFive_iterator3","SandboxFive_peer","components_SandboxFive_SandboxFive","SandboxFive","SandboxFive_classCallCheck","SandboxFive_possibleConstructorReturn","SandboxFive_getPrototypeOf","SandboxFive_objectSpread","components_App","href","src","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","react_dom_default","render","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","_possibleConstructorReturn","_getPrototypeOf","transactions","verify","Error","_","seedrandom","latency","packetLoss","randomNormal","newPeer","numConnections","shuffledAgents","shuffle","_didIteratorError","_iteratorError","slice","_ref2","onReceive","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","steps","connectPeer","amounts"],"mappings":"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","file":"static/js/main.36a2042f.chunk.js","sourcesContent":["var EthCrypto = require('eth-crypto')\n\nclass Client {\n    constructor(network) {\n        this.wallet = EthCrypto.createIdentity()\n        this.nonce = -1;\n        this.network = network\n        this.pid = this.wallet.address\n    }\n\n    toHash(data) {\n        const dataStr = JSON.stringify(data)\n        return EthCrypto.hash.keccak256(dataStr)\n    }\n\n    sign(message) {\n        const messageHash = this.toHash(message)\n        return EthCrypto.sign(\n            this.wallet.privateKey,\n            messageHash\n        )\n    }\n\n    verify(signature, messageHash, address) {\n        const signer = EthCrypto.recover(signature, messageHash)\n        return signer === address\n    }\n\n    generateTx(to, amount, type) {\n        const unsignedTx = {\n            type: type,\n            amount: amount,\n            from: this.wallet.address,\n            to: to,\n            nonce: ++this.nonce\n        }\n        const tx = {\n            contents: unsignedTx,\n            sig: this.sign(unsignedTx)\n        }\n        return tx\n    }\n    tick() {}\n}\n\nmodule.exports = Client\n\n","var EthCrypto = require('eth-crypto')\nvar NetworkSimulator = require('./networksim')\nvar Client = require('./Client')\nvar Paypal = require('./Paypal')\nvar util = require('util')\n\n// ****** Test this out using a simulated network ****** //\nconst numNodes = 2\nconst network = new NetworkSimulator(10, 0);\nconst nodes = []\n// Create new nodes based on our wallets, and connect them to the network\n\nconst paypal = new Paypal(network);\n\n// I want a reference to paypal\nnetwork.paypal = paypal\n\nnetwork.peers[paypal.pid] = []\n\nnodes.push(paypal)\nfor (let i = 1; i <= numNodes; i++) {\n  nodes.push(new Client(network))\n  network.connectToPaypal(nodes[i], paypal)\n}\nconsole.log(network.peers)\n// console.log(paypal.state)\nconst tx = nodes[0].generateTx(nodes[1].pid, 70, 'mint')\nnodes[0].applyTransaction(tx)\nfor (let i = 0; i < 3; i ++) {\nconsole.log(network.peers[nodes[i].pid].length)\n}\nconst tx1 = nodes[1].generateTx(nodes[2].pid, 14, 'send')\nnetwork.broadcastTo(nodes[1].pid, nodes[0], tx1)\nnetwork.run(100)\nconsole.log(paypal.state)\nmodule.exports = {nodes, network}\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nvar width = '400px';\nvar height = '300px';\n\nvar zoom = d3.zoom();\n\n// *****************************************************\n// ** d3 functions to manipulate attributes\n// *****************************************************\n\n// **** DRAG *****\nconst drag = d3.drag()\n  .on('start', (d) => {\n    // console.log('start', d)\n    d.fx = d.x;\n    d.fy = d.y;\n  })\n  .on('drag', (d) => {\n    // console.log('drag', d)\n    d.fx = d3.event.x;\n    d.fy = d3.event.y;\n  })\n  .on('end', (d) => {\n    d.fx = null;\n    d.fy = null;\n  });\n\n  function mousemove() {\n    if (!mousedownNode) return;\n    // update drag line\n    dragLine.attr('x2', d3.mouse(this)[0])\n      .attr('y2', d3.mouse(this)[1])\n  }\n\n  function mouseup() {\n    // console.log('MOUSEUP')\n    slashing = false\n    if (mousedownNode) {\n      // console.log('hello')\n      dragLine\n        .classed('hidden', true)\n      mousedownNode = null\n      //Check if we're snapped to a node, then append a new line\n    }\n  }\n\n  function slash(e) {\n    // console.log(\"should slash\", e)\n  }\n\nlet dragLine\n\n// **** Node Functions  ****\n\nlet nodes\nlet mousedownNode\nlet linkCreated = false\nlet graph\nlet createdLink\n\nlet slashing = false\n\nvar enterNode = (selection) => {\n  selection.classed('node', true)\n    .append('circle')\n    .attr(\"r\", d => {\n      if (d.pid === nodes[0].pid) return 25\n      return 0\n    })\n    .attr(\"xlink:href\", d => {\n      if (d.pid !== nodes[0].pid) return;\n      return d.img\n    })\n    .attr(\"cx\", d=> d.x)\n    .attr(\"cy\", d=> d.y)\n    .attr(\"fill\", d=> d.color)\n    .on('mousedown', (d) => {\n      if (linkCreated) return\n      // select node\n      mousedownNode = d;\n\n      // reposition drag line\n      dragLine\n        .classed('hidden', false)\n        .attr(\"x1\", mousedownNode.x)\n        .attr(\"y1\", mousedownNode.y)\n        .attr(\"x2\", mousedownNode.x)\n        .attr(\"y2\", mousedownNode.y);\n    })\n    .on('mouseup', function (d) {\n            // console.log(selection, nodes)\n      if (!mousedownNode) return;\n      if (d.pid !== nodes[0].pid) return;\n      dragLine\n        .classed('hidden', true)\n      graph.insert('line', '.node')\n        .attr('stroke-width', 2)\n        .attr('stroke', 'grey')\n        .attr(\"x1\", mousedownNode.x)\n        .attr(\"y1\", mousedownNode.y)\n        .attr(\"x2\", d.x)\n        .attr(\"y2\", d.y)\n        .on('mousemove', slash)\n      linkCreated = true\n      createdLink()\n    })\n\n    selection.append(\"text\")\n      .classed('noselect', true)\n      .attr('font-size', 40)\n      .attr(\"x\", d => (d.x - 22))\n      .attr(\"y\", d=> (d.y +15))\n      .text((d) => {if(d.pid !== nodes[0].pid) return (d.emoji)})\n      .on('mousedown', (d) => {\n        if (linkCreated) return\n        // select node\n        mousedownNode = d;\n\n        // reposition drag line\n        dragLine\n          .classed('hidden', false)\n          .attr(\"x1\", mousedownNode.x)\n          .attr(\"y1\", mousedownNode.y)\n          .attr(\"x2\", mousedownNode.x)\n          .attr(\"y2\", mousedownNode.y);\n      })\n      .on('mouseup', function (d) {\n              // console.log(selection, nodes)\n        if (!mousedownNode) return;\n        if (d.pid !== nodes[0].pid) return;\n        dragLine\n          .classed('hidden', true)\n        graph.insert('line', '.node')\n          .attr('stroke-width', 2)\n          .attr('stroke', 'grey')\n          .attr(\"x1\", mousedownNode.x)\n          .attr(\"y1\", mousedownNode.y)\n          .attr(\"x2\", d.x)\n          .attr(\"y2\", d.y)\n          .on('mousemove', slash)\n        linkCreated = true\n        createdLink()\n      })\n\n\n    selection.append(\"svg:image\")\n    .attr(\"xlink:href\", d => d.img)\n    .attr(\"x\", d => (d.x-14))\n    .attr(\"y\", d => (d.y-14))\n    .attr(\"height\", d => d.img ? 28 : 0)\n    .attr(\"width\", d => d.img ? 28 : 0)\n    .on('mouseup', function (d) {\n            // console.log(selection, nodes)\n      if (!mousedownNode) return;\n      if (d.pid !== nodes[0].pid) return;\n      dragLine\n        .classed('hidden', true)\n      graph.insert('line', '.node')\n        .attr('stroke-width', 2)\n        .attr('stroke', 'grey')\n        .attr(\"x1\", mousedownNode.x)\n        .attr(\"y1\", mousedownNode.y)\n        .attr(\"x2\", d.x)\n        .attr(\"y2\", d.y)\n        .on('mousemove', slash)\n      linkCreated = true\n      createdLink()\n    })\n};\n\nvar updateNode = (selection) => {\n  selection\n    .attr('fill', (d) => {\n      if (d.pid !== nodes[0].pid) return\n      // console.log('update', d.state)\n      return d.color\n    })\n    .attr('stroke', (d) => d.color)\n    .attr('stroke-width', (d) => 5)\n};\n\n// **** Link Functions  ****\n\nvar enterLink = (selection) => {\n  selection.classed('link', true)\n    .attr(\"stroke-width\", 2)\n    .attr(\"stroke\", 'grey')\n    .attr(\"x1\", (d) => d.source.x)\n    .attr(\"y1\", (d) => d.source.y)\n    .attr(\"x2\", (d) => d.target.x)\n    .attr(\"y2\", (d) => d.target.y);\n};\n\nvar updateLink = (selection) => {\n\n};\n\n// **** Message Functions  ****\nvar enterMessage = (selection) => {\n  selection.classed('message', true)\n    .classed('noselect', true)\n    .attr('font-size', 30)\n    .attr(\"x\", d=> (getNodeById(d.sender).x- 15))\n    .attr(\"y\", d=> (getNodeById(d.sender).y + 10))\n    .text('💵')\n    .append('tspan')\n    .text('🦄➡️🐯')\n    .attr('font-size', 15)\n    .attr('dx', -38)\n    .attr('dy', 12)\n\n\n\n    // .attr(\"r\", 6)\n    // .attr(\"fill\", d => '#' + d.message.sig.slice(2,8))\n    // .attr(\"fill-opacity\", 0.5)\n    // .attr('stroke-width', (d) => 3)\n    // .attr('stroke', (d) => '#' + d.message.sig.slice(2,8))\n    // .attr(\"cx\", )\n    // .attr(\"cy\", )\n}\n\nvar getNodeById = (id) => {\n  return nodes.find(\n    (node) => node.pid === id\n  )\n}\n\nconst getMsgPos = (msg, coord) => {\n  const distance = msg.time - msg.sentTime\n  const length = msg.recvTime - msg.sentTime\n  const progress = distance/length\n  const recCoord = getNodeById(msg.recipient)[coord]\n  // console.log(recCoord)\n  const sentCoord = getNodeById(msg.sender)[coord]\n  // console.log(sentCoord)\n  return progress * (recCoord - sentCoord) + sentCoord\n}\n\nvar updateMessage = (selection) => {\n  selection\n  .transition()\n  .duration(300)\n  .ease(d3.easeLinear)\n  .attr(\"x\", d => (getMsgPos(d,'x')- 15))\n  .attr(\"y\", d => (getMsgPos(d, 'y')+ 10))\n}\n\nvar exitMessage = (selection) => {\n  if(!selection.size()) return\n  graph\n  .insert('circle', '.node')\n  .attr('fill',\n    (nodes[0].badSpend) ? 'red' :\n    '#7ed321')\n  .attr('cx', d=> nodes[0].x)\n  .attr('cy', d=> nodes[0].y)\n  .attr('r', d=> 33)\n  .attr('opacity', d=> 0)\n  .transition()\n  .duration(400)\n  .attr('opacity', d=> 1)\n  .transition()\n  .duration(400)\n  .attr('opacity', d=> 0)\n  // .ease(d3.easeLinear)\n  // .attr(\"x\", d => (getMsgPos(d,'x')- 15))\n  // .attr(\"y\", d => (getMsgPos(d, 'y')+ 10))\n}\n\n// *****************************************************\n// ** Graph component\n// *****************************************************\n\nclass Graph extends Component {\n    componentDidMount() {\n      graph = d3.select(this.viz);\n      this.d3Graph = d3.select(this.viz);\n      dragLine = this.d3Graph.append('line')\n        .attr('class', 'dragline hidden')\n        .attr('stroke-width', 2)\n        .attr('stroke', 'lightgrey')\n    }\n\n    shouldComponentUpdate(nextProps) {\n      nodes = nextProps.nodes\n      const {onClick} = this.props\n      createdLink = this.props.createdLink\n      this.d3Graph = d3.select(this.viz);\n      d3.select(this.svg)\n        .on('mousemove', mousemove)\n        .on('mouseup', mouseup)\n        .on('mousedown', (d) => {\n          // select node\n          slashing = (mousedownNode == null);\n          // console.log(\"slashing:\", slashing)\n\n          // reposition drag line\n        })\n      const d3Nodes = this.d3Graph.selectAll('.node')\n        .data(nextProps.nodes, (node) => node.pid);\n      d3Nodes.enter().append('g').call(enterNode)\n      // .on('click', function(d){\n      //   onClick(d, d3.event.pageX, d3.event.pageY)\n      // })\n      d3Nodes.exit().remove();\n      d3Nodes.call(updateNode)\n\n      const d3Links = this.d3Graph.selectAll('.link')\n        .data(nextProps.links)\n\n      d3Links.enter().insert('line', '.node').call(enterLink);\n      d3Links.exit().remove();\n      d3Links.call(updateLink);\n      const d3Messages = this.d3Graph.selectAll('.message')\n        .data(nextProps.messages, message => {\n          return message.message.sig + ':' +\n          message.recipient + ':' +\n          message.sender\n        });\n      const msgEnter = d3Messages.enter().insert('text', '.node').call(enterMessage);\n      d3Messages.exit().call(exitMessage).remove() //remove();\n      d3Messages.merge(msgEnter).call(updateMessage);\n\n\n      // we should actually clone the nodes and links\n      // since we're not supposed to directly mutate\n      // props passed in from parent, and d3's force function\n      // mutates the nodes and links array directly\n      // we're bypassing that here for sake of brevity in example\n      return false;\n    }\n\n    render() {\n      return (\n        <svg ref={el => this.svg = el} width={width} height={height}>\n          <g ref={el => this.viz = el} />\n        </svg>\n      );\n    }\n}\n\nexport default Graph;\n","import React from 'react';\nimport { Button} from 'react-bootstrap';\n\nconst Controls = ({spend, disabled}) => {\n\n  return (\n        <Button className=\"spend\" onClick={spend} disabled = {disabled} >\n          Send $10 to @tiger\n         </Button>\n  );\n}\n\nexport default Controls;\n","import React, { Component } from 'react';\n\nclass Ledger extends Component {\n\trender() {\n\t\tconst paypal = this.props.paypal\n\t\tconst pid = paypal.pid\n\n\t\tlet users = Object.keys(paypal.state).filter((x) => { return x != pid })\n\n\t\tlet shift = 0\n\t\tif (!this.props.linked) {\n\t\t\tusers.shift()\n\t\t\tshift = 1\n\t\t}\n\t\tconst usernames = ['@unicorn', '@tiger']\n\n\t\tconst balances = users.map( (x, i) => {\n\t\t\treturn <div className=\"ledger-row\">\n\t\t\t\t\t\t<span className=\"ledger-name\">{usernames[i + shift]}</span>\n\t\t\t\t\t\t<span className=\"ledger-balance\">{'$' + paypal.state[x].balance + '.00'}</span>\n\t\t\t\t\t</div>\n\t\t} )\n\n\t\treturn(\n\t\t\t<div className=\"ledger\">\n\t\t\t\t<div className=\"ledger-row\">\n\t\t\t\t\t<span id=\"venmo-database\">Venmo's Database</span>\n\t\t\t\t</div>\n\t\t\t\t{balances}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Ledger;\n","import React, { Component } from 'react';\nimport {nodes, network} from '../viz/createNetSim'\nimport Graph from './Graph.js'\nimport Controls from './Controls.js'\nimport Ledger from './Ledger.js'\nimport * as d3 from 'd3'\n\nconst TICK_LENGTH = 300 //ms\n\n// graph payload (with minimalist structure)\nconst data = {\n  nodes: [],\n  links: []\n}\n\nfor (const node of nodes) {\n  // connect them\n  for (const peer of network.peers[node.pid]) {\n    // data.links.push({\n    //   source: node,\n    //   target: peer\n    // })\n  }\n}\n\ndata.links.push({\n      source: nodes[2],\n      target: network.paypal\n    })\n\nnodes[0].x = 200\nnodes[0].y = 145\n\nnodes[1].x = 25\nnodes[1].y = 160\n\nnodes[2].x = 330\nnodes[2].y = 270\n\nnodes[0].color = \"#0089FF\"\nnodes[0].img = \"venmo.svg\"\n\nnodes[1].emoji = '🦄'\nnodes[2].emoji = '🐯'\n\nclass Sandbox extends Component {\n  constructor() {\n    super()\n    this.state = {\n      speed: 1,\n      messages: [],\n      disabled: true\n    }\n  }\n\n  componentDidMount() {\n    this.timer = d3.interval(this.tick.bind(this), TICK_LENGTH/this.state.speed);\n  }\n\n  setMessageQueue(currNetwork){\n    let oldQ = currNetwork.messageQueue\n    const messages = []\n    Object.keys(oldQ).forEach(function(key,index) {\n      for (let message of oldQ[key]) {\n        const newMsg = {...message, time: currNetwork.time}\n        newMsg.recipient = newMsg.recipient.pid\n        messages.push(newMsg)\n      }\n    });\n    return messages\n  }\n\n  tick() {\n    network.tick()\n    const messages = this.setMessageQueue(network)\n    this.setState({messages: messages})\n  }\n\n  createdLink() {\n    this.setState({disabled: false})\n  }\n\n  getCurrNode(nodeId) {\n    if (network) {\n      return network.agents.find((node) => node.pid === nodeId);\n    }\n  }\n\n  // onClickNode (node, x, y) {\n  //   const {clickedNode} = this.state\n\n  //   if (clickedNode && node.pid === clickedNode.pid) {\n  //     this.setState({clickedNode: null})\n  //   } else {\n  //     this.setState({clickedNode: {...node, clickedX: x, clickedY: y}})\n  //   }\n  // };\n\n  spend(currNode){\n    console.log(currNode)\n    const node = this.getCurrNode(currNode.pid)\n    const tx = node.generateTx(nodes[2].pid, 10, 'send')\n    // Broadcast this tx to the network\n    network.broadcast(node.pid, tx)\n    //TODO copy from createsim.js\n  }\n\n  render() {\n    const {messages, speed, disabled} = this.state\n    return (\n      <div id=\"sandbox-container\">\n        <Graph\n          nodes={nodes}\n          links={data.links}\n          messages = {messages || []}\n          createdLink = {this.createdLink.bind(this)}\n        />\n        <Ledger\n          linked = {!disabled}\n          paypal = {network.paypal}\n        />\n        <Controls\n          spend={this.spend.bind(this, nodes[1])}\n          disabled = {disabled}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Sandbox;\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nvar width = '400px';\nvar height = '300px';\n\n// *****************************************************\n// ** d3 functions to manipulate attributes\n// *****************************************************\n\n\n// **** Node Functions  ****\n\nlet nodes\nlet graph\n\n\nvar enterNode = (selection) => {\n  selection.classed('node', true)\n    .append('circle')\n    .attr(\"r\", d => {\n      if (d.pid === nodes[0].pid) return 25\n      return 0\n    })\n    .attr(\"xlink:href\", d => {\n      if (d.pid !== nodes[0].pid) return;\n      return d.img\n    })\n    .attr(\"cx\", d=> d.x)\n    .attr(\"cy\", d=> d.y)\n    .attr(\"fill\", d=> d.color)\n\n    selection.append(\"text\")\n      .classed('noselect', true)\n      .attr('font-size', 40)\n      .attr(\"x\", d => (d.x - 22))\n      .attr(\"y\", d=> (d.y +15))\n      .text((d) => {if(d.pid !== nodes[0].pid) return (d.emoji)})\n\n\n    selection.append(\"svg:image\")\n    .attr(\"xlink:href\", d => d.img)\n    .attr(\"x\", d => (d.x-14))\n    .attr(\"y\", d => (d.y-14))\n    .attr(\"height\", d => d.img ? 28 : 0)\n    .attr(\"width\", d => d.img ? 28 : 0)\n\n};\n\nvar updateNode = (selection) => {\n  selection\n    .attr('fill', (d) => {\n      if (d.pid !== nodes[0].pid) return\n      // console.log('update', d.state)\n      return d.color\n    })\n    .attr('stroke', (d) => d.color)\n    .attr('stroke-width', (d) => 5)\n};\n\n// **** Link Functions  ****\n\nvar enterLink = (selection) => {\n  selection.classed('link', true)\n    .attr(\"stroke-width\", 2)\n    .attr(\"stroke\", 'grey')\n    .attr(\"x1\", (d) => d.source.x)\n    .attr(\"y1\", (d) => d.source.y)\n    .attr(\"x2\", (d) => d.target.x)\n    .attr(\"y2\", (d) => d.target.y);\n};\n\nvar updateLink = (selection) => {\n\n};\n\n// **** Message Functions  ****\nvar enterMessage = (selection) => {\n  selection.classed('message', true)\n    .classed('noselect', true)\n    .attr('font-size', 30)\n    .attr(\"x\", d=> (getNodeById(d.sender).x- 15))\n    .attr(\"y\", d=> (getNodeById(d.sender).y + 10))\n    .text('💵')\n    .append('tspan')\n    .text(d=> {\n      console.log(d)\n      return getNodeById(d.sender).emoji + '➡️' + getNodeById(d.message.contents.to).emoji})\n    .attr('font-size', 15)\n    .attr('dx', -38)\n    .attr('dy', 12)\n\n\n\n    // .attr(\"r\", 6)\n    // .attr(\"fill\", d => '#' + d.message.sig.slice(2,8))\n    // .attr(\"fill-opacity\", 0.5)\n    // .attr('stroke-width', (d) => 3)\n    // .attr('stroke', (d) => '#' + d.message.sig.slice(2,8))\n    // .attr(\"cx\", )\n    // .attr(\"cy\", )\n}\n\nvar getNodeById = (id) => {\n  return nodes.find(\n    (node) => node.pid === id\n  )\n}\n\nconst getMsgPos = (msg, coord) => {\n  const distance = msg.time - msg.sentTime\n  const length = msg.recvTime - msg.sentTime\n  const progress = distance/length\n  const recCoord = getNodeById(msg.recipient)[coord]\n  // console.log(recCoord)\n  const sentCoord = getNodeById(msg.sender)[coord]\n  // console.log(sentCoord)\n  return progress * (recCoord - sentCoord) + sentCoord\n}\n\nvar updateMessage = (selection) => {\n  selection\n  .transition()\n  .duration(300)\n  .ease(d3.easeLinear)\n  .attr(\"x\", d => (getMsgPos(d,'x')- 15))\n  .attr(\"y\", d => (getMsgPos(d, 'y')+ 10))\n}\n\nvar exitMessage = (selection) => {\n  if(!selection.size()) return\n  graph\n  .insert('circle', '.node')\n  .attr('fill',\n    (nodes[0].badSpend) ? 'red' :\n    '#7ed321')\n  .attr('cx', d=> nodes[0].x)\n  .attr('cy', d=> nodes[0].y)\n  .attr('r', d=> 33)\n  .attr('opacity', d=> 0)\n  .transition()\n  .duration(400)\n  .attr('opacity', d=> 1)\n  .transition()\n  .duration(400)\n  .attr('opacity', d=> 0)\n  // .ease(d3.easeLinear)\n  // .attr(\"x\", d => (getMsgPos(d,'x')- 15))\n  // .attr(\"y\", d => (getMsgPos(d, 'y')+ 10))\n}\n\n// *****************************************************\n// ** Graph component\n// *****************************************************\n\nclass Graph extends Component {\n    componentDidMount() {\n      graph = d3.select(this.viz);\n      this.d3Graph = d3.select(this.viz);\n    }\n\n    shouldComponentUpdate(nextProps) {\n      nodes = nextProps.nodes\n      const {onClick} = this.props\n      this.d3Graph = d3.select(this.viz);\n      d3.select(this.svg)\n\n      const d3Nodes = this.d3Graph.selectAll('.node')\n        .data(nextProps.nodes, (node) => node.pid);\n      d3Nodes.enter().append('g').call(enterNode)\n      // .on('click', function(d){\n      //   onClick(d, d3.event.pageX, d3.event.pageY)\n      // })\n      d3Nodes.exit().remove();\n      d3Nodes.call(updateNode)\n\n      const d3Links = this.d3Graph.selectAll('.link')\n        .data(nextProps.links)\n\n      d3Links.enter().insert('line', '.node').call(enterLink);\n      d3Links.exit().remove();\n      d3Links.call(updateLink);\n      const d3Messages = this.d3Graph.selectAll('.message')\n        .data(nextProps.messages, message => {\n          return message.message.sig + ':' +\n          message.recipient + ':' +\n          message.sender\n        });\n      const msgEnter = d3Messages.enter().insert('text', '.node').call(enterMessage);\n      d3Messages.exit().call(exitMessage).remove() //remove();\n      d3Messages.merge(msgEnter).call(updateMessage);\n\n\n      // we should actually clone the nodes and links\n      // since we're not supposed to directly mutate\n      // props passed in from parent, and d3's force function\n      // mutates the nodes and links array directly\n      // we're bypassing that here for sake of brevity in example\n      return false;\n    }\n\n    render() {\n      return (\n        <svg ref={el => this.svg = el} width={width} height={height}>\n          <g ref={el => this.viz = el} />\n        </svg>\n      );\n    }\n}\n\nexport default Graph;\n","import React from 'react';\nimport { Button} from 'react-bootstrap';\n\nconst Controls = ({spend, disabled}) => {\n\n  return (\n        <Button className=\"spend\" onClick={spend} disabled = {disabled} >\n          Send $10 to a friend\n         </Button>\n  );\n}\n\nexport default Controls;\n","import React, { Component } from 'react';\n\nclass Ledger extends Component {\n\trender() {\n\t\tconst paypal = this.props.paypal\n\t\tconst pid = paypal.pid\n\n\t\tlet users = Object.keys(paypal.state).filter((x) => { return x != pid })\n\n\t\tconst usernames = ['@unicorn', '@tiger', '@hamster', '@ribbit', '@fox', '@koala', '@chicken']\n\n\t\tconst balances = users.map( (x, i) => {\n\t\t\treturn <div className=\"ledger-row\">\n\t\t\t\t\t\t<span className=\"ledger-name\">{usernames[i]}</span>\n\t\t\t\t\t\t<span className=\"ledger-balance\">{'$' + paypal.state[x].balance + '.00'}</span>\n\t\t\t\t\t</div>\n\t\t} )\n\n\t\treturn(\n\t\t\t<div className=\"ledger\">\n\t\t\t\t<div className=\"ledger-row\">\n\t\t\t\t\t<span id=\"venmo-database\">Venmo's Database</span>\n\t\t\t\t</div>\n\t\t\t\t{balances}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Ledger;\n","import React, { Component } from 'react';\nimport {nodes, network} from './createNetSim'\nimport Graph from './Graph.js'\nimport Controls from './Controls.js'\nimport Ledger from './Ledger.js'\nimport * as d3 from 'd3'\n\nconst TICK_LENGTH = 300 //ms\n\n// graph payload (with minimalist structure)\nconst data = {\n  nodes: [],\n  links: []\n}\n\nfor (const node of nodes) {\n  // connect them\n  for (const peer of network.peers[node.pid]) {\n    data.links.push({\n      source: node,\n      target: peer\n    })\n  }\n}\n\n// data.links.push({\n//       source: nodes[2],\n//       target: network.paypal\n//     })\n\n// Venmo\nnodes[0].x = 200\nnodes[0].y = 145\n\nnodes[1].x = 25\nnodes[1].y = 160\n\nnodes[2].x = 330\nnodes[2].y = 270\n\nnodes[3].x = 25\nnodes[3].y = 80\n\nnodes[4].x = 300\nnodes[4].y = 120\n\nnodes[5].x = 360\nnodes[5].y = 160\n\nnodes[6].x = 130\nnodes[6].y = 80\n\nnodes[7].x = 130\nnodes[7].y = 200\n\n\nnodes[0].color = \"#0089FF\"\nnodes[0].img = \"venmo.svg\"\nnodes[1].emoji = '🦄'\nnodes[2].emoji = '🐯'\nnodes[3].emoji = '🐹'\nnodes[4].emoji = '🐸'\nnodes[5].emoji = '🦊'\nnodes[6].emoji = '🐨'\nnodes[7].emoji = '🐔'\n\nclass SandboxOne extends Component {\n  constructor() {\n    super()\n    this.state = {\n      speed: 1,\n      messages: [],\n    }\n  }\n\n  componentDidMount() {\n    this.timer = d3.interval(this.tick.bind(this), TICK_LENGTH/this.state.speed);\n    d3.interval(this.randomSpend.bind(this), 2000);\n  }\n\n  randomSpend() {\n    const sender = nodes[Math.floor(Math.random() * (nodes.length-2) + 2)]\n    const receiver = nodes[Math.floor(Math.random() * (nodes.length-1) + 1)]\n    if(sender.pid===receiver.pid) return\n    const tx = sender.generateTx(receiver.pid, 10, 'send')\n    // Broadcast this tx to the network\n    network.broadcast(sender.pid, tx)\n  }\n\n  setMessageQueue(currNetwork){\n    let oldQ = currNetwork.messageQueue\n    const messages = []\n    Object.keys(oldQ).forEach(function(key,index) {\n      for (let message of oldQ[key]) {\n        const newMsg = {...message, time: currNetwork.time}\n        newMsg.recipient = newMsg.recipient.pid\n        messages.push(newMsg)\n      }\n    });\n    return messages\n  }\n\n  tick() {\n    network.tick()\n    const messages = this.setMessageQueue(network)\n    this.setState({messages: messages})\n  }\n\n  getCurrNode(nodeId) {\n    if (network) {\n      return network.agents.find((node) => node.pid === nodeId);\n    }\n  }\n\n  // onClickNode (node, x, y) {\n  //   const {clickedNode} = this.state\n\n  //   if (clickedNode && node.pid === clickedNode.pid) {\n  //     this.setState({clickedNode: null})\n  //   } else {\n  //     this.setState({clickedNode: {...node, clickedX: x, clickedY: y}})\n  //   }\n  // };\n\n  spend(currNode){\n    console.log(currNode)\n    const node = this.getCurrNode(currNode.pid)\n\n    const recipient = nodes[Math.floor(Math.random() * (nodes.length-2) + 2)]\n    const tx = node.generateTx(recipient.pid, 10, 'send')\n    // Broadcast this tx to the network\n    network.broadcast(node.pid, tx)\n    //TODO copy from createsim.js\n  }\n\n  render() {\n    const {messages, speed} = this.state\n    return (\n      <div id=\"sandbox-container\">\n        <Graph\n          nodes={nodes}\n          links={data.links}\n          messages = {messages || []}\n        />\n        <Ledger\n          paypal = {network.paypal}\n        />\n        <Controls\n          spend={this.spend.bind(this, nodes[1])}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SandboxOne;\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nvar width = '400px';\nvar height = '300px';\n\nvar zoom = d3.zoom();\n\n// *****************************************************\n// ** d3 functions to manipulate attributes\n// *****************************************************\n\n// **** DRAG *****\nconst drag = d3.drag()\n  .on('start', (d) => {\n    // console.log('start', d)\n    d.fx = d.x;\n    d.fy = d.y;\n  })\n  .on('drag', (d) => {\n    // console.log('drag', d)\n    d.fx = d3.event.x;\n    d.fy = d3.event.y;\n  })\n  .on('end', (d) => {\n    d.fx = null;\n    d.fy = null;\n  });\n\n  function mousemove() {\n    if (!mousedownNode) return;\n    // update drag line\n    dragLine.attr('x2', d3.mouse(this)[0])\n      .attr('y2', d3.mouse(this)[1])\n  }\n\n  function mouseup() {\n    // console.log('MOUSEUP')\n    slashing = false\n    if (mousedownNode) {\n      // console.log('hello')\n      dragLine\n        .classed('hidden', true)\n      mousedownNode = null\n      //Check if we're snapped to a node, then append a new line\n    }\n  }\n\n  function slash(e) {\n    // console.log(\"should slash\", e)\n  }\n\nlet dragLine\n\n// **** Node Functions  ****\n\nlet nodes\nlet mousedownNode\nlet linkCreated = false\nlet graph\nlet createdLink\n\nlet slashing = false\n\nvar enterNode = (selection) => {\n  selection.classed('node', true)\n    .append('circle')\n    .attr(\"r\", d => {\n      if (d.pid === nodes[0].pid) return 25\n      return 0\n    })\n    .attr(\"xlink:href\", d => {\n      if (d.pid !== nodes[0].pid) return;\n      return d.img\n    })\n    .attr(\"cx\", d=> d.x)\n    .attr(\"cy\", d=> d.y)\n    .attr(\"fill\", d=> d.color)\n    .on('mousedown', (d) => {\n      if (linkCreated) return\n      // select node\n      mousedownNode = d;\n\n      // reposition drag line\n      dragLine\n        .classed('hidden', false)\n        .attr(\"x1\", mousedownNode.x)\n        .attr(\"y1\", mousedownNode.y)\n        .attr(\"x2\", mousedownNode.x)\n        .attr(\"y2\", mousedownNode.y);\n    })\n    .on('mouseup', function (d) {\n            // console.log(selection, nodes)\n      if (!mousedownNode) return;\n      if (d.pid !== nodes[0].pid) return;\n      dragLine\n        .classed('hidden', true)\n      bigX()\n    })\n\n    selection.append(\"text\")\n      .classed('noselect', true)\n      .attr('font-size', 40)\n      .attr(\"x\", d => (d.x - 22))\n      .attr(\"y\", d=> (d.y +15))\n      .text((d) => {if(d.pid !== nodes[0].pid) return (d.emoji)})\n      .on('mousedown', (d) => {\n        if (linkCreated) return\n        // select node\n        mousedownNode = d;\n\n        // reposition drag line\n        dragLine\n          .classed('hidden', false)\n          .attr(\"x1\", mousedownNode.x)\n          .attr(\"y1\", mousedownNode.y)\n          .attr(\"x2\", mousedownNode.x)\n          .attr(\"y2\", mousedownNode.y);\n      })\n      .on('mouseup', function (d) {\n              // console.log(selection, nodes)\n        if (!mousedownNode) return;\n        if (d.pid !== nodes[0].pid) return;\n        dragLine\n          .classed('hidden', true)\n      })\n\n\n    selection.append(\"svg:image\")\n    .attr(\"xlink:href\", d => d.img)\n    .attr(\"x\", d => (d.x-14))\n    .attr(\"y\", d => (d.y-14))\n    .attr(\"height\", d => d.img ? 28 : 0)\n    .attr(\"width\", d => d.img ? 28 : 0)\n    .on('mouseup', function (d) {\n            // console.log(selection, nodes)\n      if (!mousedownNode) return;\n      if (d.pid !== nodes[0].pid) return;\n      dragLine\n        .classed('hidden', true)\n      bigX()\n    })\n};\n\nvar bigX = ()=>{\n  graph\n  .insert('circle', '.node')\n  .attr('fill', 'red')\n  .attr('cx', d=> nodes[0].x)\n  .attr('cy', d=> nodes[0].y)\n  .attr('r', d=> 40)\n  .attr('opacity', d=> 0)\n  .transition()\n  .duration(400)\n  .attr('opacity', d=> 1)\n  .transition()\n  .duration(400)\n  .attr('opacity', d=> 0)\n}\n\nvar updateNode = (selection) => {\n  selection\n    .attr('fill', (d) => {\n      if (d.pid !== nodes[0].pid) return\n      // console.log('update', d.state)\n      return d.color\n    })\n    .attr('stroke', (d) => d.color)\n    .attr('stroke-width', (d) => 5)\n};\n\n// **** Link Functions  ****\n\nvar enterLink = (selection) => {\n  selection.classed('link', true)\n    .attr(\"stroke-width\", 2)\n    .attr(\"stroke\", 'grey')\n    .attr(\"x1\", (d) => d.source.x)\n    .attr(\"y1\", (d) => d.source.y)\n    .attr(\"x2\", (d) => d.target.x)\n    .attr(\"y2\", (d) => d.target.y);\n};\n\nvar updateLink = (selection) => {\n\n};\n\n// **** Message Functions  ****\nvar enterMessage = (selection) => {\n  selection.classed('message', true)\n    .classed('noselect', true)\n    .attr('font-size', 30)\n    .attr(\"x\", d=> (getNodeById(d.sender).x- 15))\n    .attr(\"y\", d=> (getNodeById(d.sender).y + 10))\n    .text('💵')\n    .append('tspan')\n    .text(d=> {\n      console.log(d)\n      return getNodeById(d.sender).emoji + '➡️' + getNodeById(d.message.contents.to).emoji})\n    .attr('font-size', 15)\n    .attr('dx', -38)\n    .attr('dy', 12)\n\n\n\n    // .attr(\"r\", 6)\n    // .attr(\"fill\", d => '#' + d.message.sig.slice(2,8))\n    // .attr(\"fill-opacity\", 0.5)\n    // .attr('stroke-width', (d) => 3)\n    // .attr('stroke', (d) => '#' + d.message.sig.slice(2,8))\n    // .attr(\"cx\", )\n    // .attr(\"cy\", )\n}\n\nvar getNodeById = (id) => {\n  return nodes.find(\n    (node) => node.pid === id\n  )\n}\n\nconst getMsgPos = (msg, coord) => {\n  const distance = msg.time - msg.sentTime\n  const length = msg.recvTime - msg.sentTime\n  const progress = distance/length\n  const recCoord = getNodeById(msg.recipient)[coord]\n  // console.log(recCoord)\n  const sentCoord = getNodeById(msg.sender)[coord]\n  // console.log(sentCoord)\n  return progress * (recCoord - sentCoord) + sentCoord\n}\n\nvar updateMessage = (selection) => {\n  selection\n  .transition()\n  .duration(300)\n  .ease(d3.easeLinear)\n  .attr(\"x\", d => (getMsgPos(d,'x')- 15))\n  .attr(\"y\", d => (getMsgPos(d, 'y')+ 10))\n}\n\nvar exitMessage = (selection) => {\n  if(!selection.size()) return\n  graph\n  .insert('circle', '.node')\n  .attr('fill',\n    (nodes[0].badSpend) ? 'red' :\n    '#7ed321')\n  .attr('cx', d=> nodes[0].x)\n  .attr('cy', d=> nodes[0].y)\n  .attr('r', d=> 33)\n  .attr('opacity', d=> 0)\n  .transition()\n  .duration(400)\n  .attr('opacity', d=> 1)\n  .transition()\n  .duration(400)\n  .attr('opacity', d=> 0)\n  // .ease(d3.easeLinear)\n  // .attr(\"x\", d => (getMsgPos(d,'x')- 15))\n  // .attr(\"y\", d => (getMsgPos(d, 'y')+ 10))\n}\n\n// *****************************************************\n// ** Graph component\n// *****************************************************\n\nclass Graph extends Component {\n    componentDidMount() {\n      graph = d3.select(this.viz);\n      this.d3Graph = d3.select(this.viz);\n      dragLine = this.d3Graph.append('line')\n        .attr('class', 'dragline hidden')\n        .attr('stroke-width', 2)\n        .attr('stroke', 'lightgrey')\n    }\n\n    shouldComponentUpdate(nextProps) {\n      nodes = nextProps.nodes\n      const {onClick} = this.props\n      createdLink = this.props.createdLink\n      this.d3Graph = d3.select(this.viz);\n      d3.select(this.svg)\n        .on('mousemove', mousemove)\n        .on('mouseup', mouseup)\n        .on('mousedown', (d) => {\n          // select node\n          slashing = (mousedownNode == null);\n          // console.log(\"slashing:\", slashing)\n\n          // reposition drag line\n        })\n      const d3Nodes = this.d3Graph.selectAll('.node')\n        .data(nextProps.nodes, (node) => node.pid);\n      d3Nodes.enter().append('g').call(enterNode)\n      // .on('click', function(d){\n      //   onClick(d, d3.event.pageX, d3.event.pageY)\n      // })\n      d3Nodes.exit().remove();\n      d3Nodes.call(updateNode)\n\n      const d3Links = this.d3Graph.selectAll('.link')\n        .data(nextProps.links)\n\n      d3Links.enter().insert('line', '.node').call(enterLink);\n      d3Links.exit().remove();\n      d3Links.call(updateLink);\n      const d3Messages = this.d3Graph.selectAll('.message')\n        .data(nextProps.messages, message => {\n          return message.message.sig + ':' +\n          message.recipient + ':' +\n          message.sender\n        });\n      const msgEnter = d3Messages.enter().insert('text', '.node').call(enterMessage);\n      d3Messages.exit().call(exitMessage).remove() //remove();\n      d3Messages.merge(msgEnter).call(updateMessage);\n\n\n      // we should actually clone the nodes and links\n      // since we're not supposed to directly mutate\n      // props passed in from parent, and d3's force function\n      // mutates the nodes and links array directly\n      // we're bypassing that here for sake of brevity in example\n      return false;\n    }\n\n    render() {\n      return (\n        <svg ref={el => this.svg = el} id=\"border\" width={width} height={height}>\n          <g ref={el => this.viz = el} />\n        </svg>\n      );\n    }\n}\n\nexport default Graph;\n","import React from 'react';\nimport { Button} from 'react-bootstrap';\n\nconst Controls = ({spend, disabled}) => {\n\n  return (\n        <Button className=\"spend\" onClick={spend} disabled = {disabled} >\n          Send $10 to @tiger\n         </Button>\n  );\n}\n\nexport default Controls;\n","import React, { Component } from 'react';\n\nclass Ledger extends Component {\n\trender() {\n\t\tconst paypal = this.props.paypal\n\t\tconst pid = paypal.pid\n\n\t\tlet users = Object.keys(paypal.state).filter((x) => { return x != pid })\n\n\t\tlet shift = 0\n\t\tif (!this.props.linked) {\n\t\t\tusers.shift()\n\t\t\tshift = 1\n\t\t}\n\t\tconst usernames = ['@unicorn', '@tiger', '@hamster', '@ribbit', '@fox', '@koala', '@chicken']\n\n\t\tconst balances = users.map( (x, i) => {\n\t\t\treturn <div className=\"ledger-row\">\n\t\t\t\t\t\t<span className=\"ledger-name\">{usernames[i + shift]}</span>\n\t\t\t\t\t\t<span className=\"ledger-balance\">{'$' + paypal.state[x].balance + '.00'}</span>\n\t\t\t\t\t</div>\n\t\t} )\n\n\t\treturn(\n\t\t\t<div className=\"ledger\">\n\t\t\t\t<div className=\"ledger-row\">\n\t\t\t\t\t<span id=\"venmo-database\">Venmo's Database</span>\n\t\t\t\t</div>\n\t\t\t\t{balances}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Ledger;\n","import React, { Component } from 'react';\nimport {nodes, network} from './createNetSim'\nimport Graph from './Graph.js'\nimport Controls from './Controls.js'\nimport Ledger from './Ledger.js'\nimport * as d3 from 'd3'\n\nconst TICK_LENGTH = 300 //ms\n\n// graph payload (with minimalist structure)\nconst data = {\n  nodes: [],\n  links: []\n}\n\nfor (const node of nodes) {\n  // connect them\n  for (const peer of network.peers[node.pid]) {\n    data.links.push({\n      source: node,\n      target: peer\n    })\n  }\n}\n\n// data.links.push({\n//       source: nodes[2],\n//       target: network.paypal\n//     })\n\nnodes[0].x = 200\nnodes[0].y = 145\n\nnodes[1].x = 165\nnodes[1].y = 260\n\nnodes[2].x = 330\nnodes[2].y = 270\n\nnodes[3].x = 25\nnodes[3].y = 80\n\nnodes[4].x = 300\nnodes[4].y = 120\n\nnodes[5].x = 360\nnodes[5].y = 160\n\nnodes[6].x = 130\nnodes[6].y = 80\n\nnodes[7].x = 130\nnodes[7].y = 200\n\n\nnodes[0].color = \"#0089FF\"\nnodes[0].img = \"venmo.svg\"\nnodes[1].emoji = '🦄'\nnodes[2].emoji = '🐯'\nnodes[3].emoji = '🐹'\nnodes[4].emoji = '🐸'\nnodes[5].emoji = '🦊'\nnodes[6].emoji = '🐨'\nnodes[7].emoji = '🐔'\n\nclass SandboxOne extends Component {\n  constructor() {\n    super()\n    this.state = {\n      speed: 1,\n      messages: [],\n      disabled: true\n    }\n  }\n\n  componentDidMount() {\n    this.timer = d3.interval(this.tick.bind(this), TICK_LENGTH/this.state.speed);\n    d3.interval(this.randomSpend.bind(this), 2000);\n  }\n\n  randomSpend() {\n    const sender = nodes[Math.floor(Math.random() * (nodes.length-2) + 2)]\n    const receiver = nodes[Math.floor(Math.random() * (nodes.length-2) + 2)]\n    if(sender.pid===receiver.pid) return\n    const tx = sender.generateTx(receiver.pid, 10, 'send')\n    // Broadcast this tx to the network\n    network.broadcast(sender.pid, tx)\n  }\n\n  setMessageQueue(currNetwork){\n    let oldQ = currNetwork.messageQueue\n    const messages = []\n    Object.keys(oldQ).forEach(function(key,index) {\n      for (let message of oldQ[key]) {\n        const newMsg = {...message, time: currNetwork.time}\n        newMsg.recipient = newMsg.recipient.pid\n        messages.push(newMsg)\n      }\n    });\n    return messages\n  }\n\n  tick() {\n    network.tick()\n    const messages = this.setMessageQueue(network)\n    this.setState({messages: messages})\n  }\n\n  createdLink() {\n    this.setState({disabled: false})\n  }\n\n  getCurrNode(nodeId) {\n    if (network) {\n      return network.agents.find((node) => node.pid === nodeId);\n    }\n  }\n\n  // onClickNode (node, x, y) {\n  //   const {clickedNode} = this.state\n\n  //   if (clickedNode && node.pid === clickedNode.pid) {\n  //     this.setState({clickedNode: null})\n  //   } else {\n  //     this.setState({clickedNode: {...node, clickedX: x, clickedY: y}})\n  //   }\n  // };\n\n  spend(currNode){\n    console.log(currNode)\n    const node = this.getCurrNode(currNode.pid)\n    const tx = node.generateTx(nodes[2].pid, 10, 'send')\n    // Broadcast this tx to the network\n    network.broadcast(node.pid, tx)\n    //TODO copy from createsim.js\n  }\n\n  render() {\n    const {messages, speed, disabled} = this.state\n    return (\n      <div id=\"sandbox-container\">\n        <Graph\n          nodes={nodes}\n          links={data.links}\n          messages = {messages || []}\n          createdLink = {this.createdLink.bind(this)}\n        />\n        <Ledger\n          linked = {!disabled}\n          paypal = {network.paypal}\n        />\n        <Controls\n          spend={this.spend.bind(this, nodes[1])}\n          disabled = {disabled}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SandboxOne;\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nvar width = '400px';\nvar height = '300px';\n\n// *****************************************************\n// ** d3 functions to manipulate attributes\n// *****************************************************\n\n\n// **** Node Functions  ****\n\nlet nodes\nlet graph\n\n\nvar enterNode = (selection) => {\n  selection.classed('node', true)\n    .append('circle')\n    .attr(\"r\", d => {\n      if (d.pid === nodes[0].pid) return 25\n      return 0\n    })\n    .attr(\"xlink:href\", d => {\n      if (d.pid !== nodes[0].pid) return;\n      return d.img\n    })\n    .attr(\"cx\", d=> d.x)\n    .attr(\"cy\", d=> d.y)\n    .attr(\"fill\", d=> d.color)\n\n    selection.append(\"text\")\n      .classed('noselect', true)\n      .attr('font-size', 40)\n      .attr(\"x\", d => (d.x - 22))\n      .attr(\"y\", d=> (d.y +15))\n      .text((d) => {if(d.pid !== nodes[0].pid) return (d.emoji)})\n\n\n    selection.append(\"svg:image\")\n    .attr(\"xlink:href\", d => d.img)\n    .attr(\"x\", d => (d.x-14))\n    .attr(\"y\", d => (d.y-14))\n    .attr(\"height\", d => d.img ? 28 : 0)\n    .attr(\"width\", d => d.img ? 28 : 0)\n\n};\n\nvar updateNode = (selection) => {\n  selection\n    .attr('fill', (d) => {\n      if (d.pid !== nodes[0].pid) return\n      // console.log('update', d.state)\n      return d.color\n    })\n    .attr('stroke', (d) => d.color)\n    .attr('stroke-width', (d) => 5)\n};\n\n// **** Link Functions  ****\n\nvar enterLink = (selection) => {\n  selection.classed('link', true)\n    .attr(\"stroke-width\", 2)\n    .attr(\"stroke\", 'grey')\n    .attr(\"stroke-dasharray\", (d) => d.source.pid == nodes[1].pid ? 4 : 0)\n    .attr(\"x1\", (d) => d.source.x)\n    .attr(\"y1\", (d) => d.source.y)\n    .attr(\"x2\", (d) => d.target.x)\n    .attr(\"y2\", (d) => d.target.y);\n};\n\nvar updateLink = (selection) => {\n\n};\n\n// **** Message Functions  ****\nvar enterMessage = (selection) => {\n  selection.classed('message', true)\n    .classed('noselect', true)\n    .attr('font-size', 30)\n    .attr(\"x\", d=> (getNodeById(d.sender).x- 15))\n    .attr(\"y\", d=> (getNodeById(d.sender).y + 10))\n    .text('💵')\n    .append('tspan')\n    .text(d=> {\n      console.log(d)\n      return getNodeById(d.sender).emoji + '➡️' + getNodeById(d.message.contents.to).emoji})\n    .attr('font-size', 15)\n    .attr('dx', -38)\n    .attr('dy', 12)\n\n\n\n    // .attr(\"r\", 6)\n    // .attr(\"fill\", d => '#' + d.message.sig.slice(2,8))\n    // .attr(\"fill-opacity\", 0.5)\n    // .attr('stroke-width', (d) => 3)\n    // .attr('stroke', (d) => '#' + d.message.sig.slice(2,8))\n    // .attr(\"cx\", )\n    // .attr(\"cy\", )\n}\n\nvar getNodeById = (id) => {\n  return nodes.find(\n    (node) => node.pid === id\n  )\n}\n\nconst getMsgPos = (msg, coord) => {\n  const distance = msg.time - msg.sentTime\n  const length = msg.recvTime - msg.sentTime\n  const progress = distance/length\n  const recCoord = getNodeById(msg.recipient)[coord]\n  // console.log(recCoord)\n  const sentCoord = getNodeById(msg.sender)[coord]\n  // console.log(sentCoord)\n  return progress * (recCoord - sentCoord) + sentCoord\n}\n\nvar updateMessage = (selection) => {\n  selection\n  .transition()\n  .duration(300)\n  .ease(d3.easeLinear)\n  .attr(\"x\", d => (getMsgPos(d,'x')- 15))\n  .attr(\"y\", d => (getMsgPos(d, 'y')+ 10))\n}\n\nvar exitMessage = (selection) => {\n  if(!selection.size()) return\n  graph\n  .insert('circle', '.node')\n  .attr('fill',\n    (nodes[0].badSpend) ? 'red' :\n    '#7ed321')\n  .attr('cx', d=> nodes[0].x)\n  .attr('cy', d=> nodes[0].y)\n  .attr('r', d=> 33)\n  .attr('opacity', d=> 0)\n  .transition()\n  .duration(400)\n  .attr('opacity', d=> 1)\n  .transition()\n  .duration(400)\n  .attr('opacity', d=> 0)\n  // .ease(d3.easeLinear)\n  // .attr(\"x\", d => (getMsgPos(d,'x')- 15))\n  // .attr(\"y\", d => (getMsgPos(d, 'y')+ 10))\n}\n\n// *****************************************************\n// ** Graph component\n// *****************************************************\n\nclass Graph extends Component {\n    componentDidMount() {\n      graph = d3.select(this.viz);\n      this.d3Graph = d3.select(this.viz);\n    }\n\n    shouldComponentUpdate(nextProps) {\n      nodes = nextProps.nodes\n      const {onClick} = this.props\n      this.d3Graph = d3.select(this.viz);\n      d3.select(this.svg)\n\n      const d3Nodes = this.d3Graph.selectAll('.node')\n        .data(nextProps.nodes, (node) => node.pid);\n      d3Nodes.enter().append('g').call(enterNode)\n      // .on('click', function(d){\n      //   onClick(d, d3.event.pageX, d3.event.pageY)\n      // })\n      d3Nodes.exit().remove();\n      d3Nodes.call(updateNode)\n\n      const d3Links = this.d3Graph.selectAll('.link')\n        .data(nextProps.links)\n\n      d3Links.enter().insert('line', '.node').call(enterLink);\n      d3Links.exit().remove();\n      d3Links.call(updateLink);\n      const d3Messages = this.d3Graph.selectAll('.message')\n        .data(nextProps.messages, message => {\n          return message.message.sig + ':' +\n          message.recipient + ':' +\n          message.sender\n        });\n      const msgEnter = d3Messages.enter().insert('text', '.node').call(enterMessage);\n      d3Messages.exit().call(exitMessage).remove() //remove();\n      d3Messages.merge(msgEnter).call(updateMessage);\n\n\n      // we should actually clone the nodes and links\n      // since we're not supposed to directly mutate\n      // props passed in from parent, and d3's force function\n      // mutates the nodes and links array directly\n      // we're bypassing that here for sake of brevity in example\n      return false;\n    }\n\n    render() {\n      return (\n        <svg ref={el => this.svg = el} width={width} height={height}>\n          <g ref={el => this.viz = el} />\n        </svg>\n      );\n    }\n}\n\nexport default Graph;\n","import React from 'react';\nimport { Button} from 'react-bootstrap';\n\nconst Controls = ({spend, disabled}) => {\n\n  return (\n        <Button className=\"spend\" onClick={spend} disabled = {disabled} >\n          Send $10 to a friend\n         </Button>\n  );\n}\n\nexport default Controls;\n","import React, { Component } from 'react';\n\nclass Ledger extends Component {\n\trender() {\n\t\tconst paypal = this.props.paypal\n\t\tconst pid = paypal.pid\n\n\t\tlet users = Object.keys(paypal.state).filter((x) => { return x != pid })\n\n\t\tconst usernames = ['@unicorn', '@tiger', '@hamster', '@ribbit', '@fox', '@koala', '@chicken']\n\n\t\tconst balances = users.map( (x, i) => {\n\t\t\treturn <div className=\"ledger-row\">\n\t\t\t\t\t\t<span className=\"ledger-name\">{usernames[i]}</span>\n\t\t\t\t\t\t<span className=\"ledger-balance\">{'$' + paypal.state[x].balance + '.00'}</span>\n\t\t\t\t\t</div>\n\t\t} )\n\n\t\treturn(\n\t\t\t<div className=\"ledger\">\n\t\t\t\t<div className=\"ledger-row\">\n\t\t\t\t\t<span id=\"venmo-database\">Venmo's Database</span>\n\t\t\t\t</div>\n\t\t\t\t{balances}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Ledger;\n","import React, { Component } from 'react';\nimport {nodes, network} from './createNetSim'\nimport Graph from './Graph.js'\nimport Controls from './Controls.js'\nimport Ledger from './Ledger.js'\nimport * as d3 from 'd3'\n\nconst TICK_LENGTH = 300 //ms\n\n// graph payload (with minimalist structure)\nconst data = {\n  nodes: [],\n  links: []\n}\n\nfor (const node of nodes) {\n  // connect them\n  for (const peer of network.peers[node.pid]) {\n    data.links.push({\n      source: node,\n      target: peer\n    })\n  }\n}\n\n// data.links.push({\n//       source: nodes[2],\n//       target: network.paypal\n//     })\n\n// Venmo\nnodes[0].x = 200\nnodes[0].y = 145\n\nnodes[1].x = 25\nnodes[1].y = 160\n\nnodes[2].x = 330\nnodes[2].y = 270\n\nnodes[3].x = 25\nnodes[3].y = 80\n\nnodes[4].x = 300\nnodes[4].y = 120\n\nnodes[5].x = 360\nnodes[5].y = 160\n\nnodes[6].x = 130\nnodes[6].y = 80\n\nnodes[7].x = 130\nnodes[7].y = 200\n\n\nnodes[0].color = \"#0089FF\"\nnodes[0].img = \"venmo.svg\"\nnodes[1].emoji = '🦄'\nnodes[2].emoji = '🐯'\nnodes[3].emoji = '🐹'\nnodes[4].emoji = '🐸'\nnodes[5].emoji = '🦊'\nnodes[6].emoji = '🐨'\nnodes[7].emoji = '🐔'\n\nclass SandboxThree extends Component {\n  constructor() {\n    super()\n    this.state = {\n      speed: 1,\n      messages: [],\n    }\n  }\n\n  componentDidMount() {\n    this.timer = d3.interval(this.tick.bind(this), TICK_LENGTH/this.state.speed);\n    d3.interval(this.randomSpend.bind(this), 2000);\n  }\n\n  randomSpend() {\n    const sender = nodes[Math.floor(Math.random() * (nodes.length-2) + 2)]\n    const receiver = nodes[Math.floor(Math.random() * (nodes.length-1) + 1)]\n    if(sender.pid===receiver.pid) return\n    const tx = sender.generateTx(receiver.pid, 10, 'send')\n    // Broadcast this tx to the network\n    network.broadcast(sender.pid, tx)\n  }\n\n  setMessageQueue(currNetwork){\n    let oldQ = currNetwork.messageQueue\n    const messages = []\n    Object.keys(oldQ).forEach(function(key,index) {\n      for (let message of oldQ[key]) {\n        const newMsg = {...message, time: currNetwork.time}\n        newMsg.recipient = newMsg.recipient.pid\n        messages.push(newMsg)\n      }\n    });\n    return messages\n  }\n\n  tick() {\n    network.tick()\n    const messages = this.setMessageQueue(network)\n    this.setState({messages: messages})\n  }\n\n  getCurrNode(nodeId) {\n    if (network) {\n      return network.agents.find((node) => node.pid === nodeId);\n    }\n  }\n\n  // onClickNode (node, x, y) {\n  //   const {clickedNode} = this.state\n\n  //   if (clickedNode && node.pid === clickedNode.pid) {\n  //     this.setState({clickedNode: null})\n  //   } else {\n  //     this.setState({clickedNode: {...node, clickedX: x, clickedY: y}})\n  //   }\n  // };\n\n  spend(currNode){\n    console.log(currNode)\n    const node = this.getCurrNode(currNode.pid)\n\n    const recipient = nodes[Math.floor(Math.random() * (nodes.length-2) + 2)]\n    const tx = node.generateTx(recipient.pid, 10, 'send')\n    // Broadcast this tx to the network\n    network.broadcast(node.pid, tx)\n    //TODO copy from createsim.js\n  }\n\n  render() {\n    const {messages, speed} = this.state\n    return (\n      <div id=\"sandbox-container\">\n        <Graph\n          nodes={nodes}\n          links={data.links}\n          messages = {messages || []}\n        />\n        <Ledger\n          paypal = {network.paypal}\n        />\n        <Controls\n          spend={this.spend.bind(this, nodes[1])}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SandboxThree;\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nvar width = '400px';\nvar height = '300px';\n\n// *****************************************************\n// ** d3 functions to manipulate attributes\n// *****************************************************\n\n\n// **** Node Functions  ****\n\nlet nodes\nlet graph\nlet minted = 0\n\nvar enterNode = (selection) => {\n  selection.classed('node', true)\n    .append('circle')\n    .attr(\"r\", d => {\n      if (d.pid === nodes[0].pid) return 25\n      return 0\n    })\n    .attr(\"xlink:href\", d => {\n      if (d.pid !== nodes[0].pid) return;\n      return d.img\n    })\n    .attr(\"cx\", d=> d.x)\n    .attr(\"cy\", d=> d.y)\n    .attr(\"fill\", d=> d.color)\n\n    selection.append(\"text\")\n      .classed('noselect', true)\n      .attr('font-size', 40)\n      .attr(\"x\", d => (d.x - 22))\n      .attr(\"y\", d=> (d.y +15))\n      .text((d) => {if(d.pid !== nodes[0].pid) return (d.emoji)})\n\n\n    selection.append(\"svg:image\")\n    .attr(\"xlink:href\", d => d.img)\n    .attr(\"x\", d => (d.x-14))\n    .attr(\"y\", d => (d.y-14))\n    .attr(\"height\", d => d.img ? 28 : 0)\n    .attr(\"width\", d => d.img ? 28 : 0)\n\n};\n\nvar updateNode = (selection) => {\n  selection\n    .attr('fill', (d) => {\n      if (d.pid !== nodes[0].pid) return\n      // console.log('update', d.state)\n      return d.color\n    })\n    .attr('stroke', (d) => d.color)\n    .attr('stroke-width', (d) => 5)\n};\n\n// **** Link Functions  ****\n\nvar enterLink = (selection) => {\n  selection.classed('link', true)\n    .attr(\"stroke-width\", 2)\n    .attr(\"stroke\", 'grey')\n    .attr(\"x1\", (d) => d.source.x)\n    .attr(\"y1\", (d) => d.source.y)\n    .attr(\"x2\", (d) => d.target.x)\n    .attr(\"y2\", (d) => d.target.y);\n};\n\nvar updateLink = (selection) => {\n\n};\n\n// **** Message Functions  ****\nvar enterMessage = (selection) => {\n  selection.classed('message', true)\n    .classed('noselect', true)\n    .attr('font-size', 30)\n    .attr(\"x\", d=> (getNodeById(d.sender).x- 15))\n    .attr(\"y\", d=> (getNodeById(d.sender).y + 10))\n    .text('💵')\n    .append('tspan')\n    .text(d=> {\n      console.log(d)\n      return getNodeById(d.sender).emoji + '➡️' + getNodeById(d.message.contents.to).emoji})\n    .attr('font-size', 15)\n    .attr('dx', -38)\n    .attr('dy', 12)\n\n\n\n    // .attr(\"r\", 6)\n    // .attr(\"fill\", d => '#' + d.message.sig.slice(2,8))\n    // .attr(\"fill-opacity\", 0.5)\n    // .attr('stroke-width', (d) => 3)\n    // .attr('stroke', (d) => '#' + d.message.sig.slice(2,8))\n    // .attr(\"cx\", )\n    // .attr(\"cy\", )\n}\n\nvar getNodeById = (id) => {\n  return nodes.find(\n    (node) => node.pid === id\n  )\n}\n\nconst getMsgPos = (msg, coord) => {\n  const distance = msg.time - msg.sentTime\n  const length = msg.recvTime - msg.sentTime\n  const progress = distance/length\n  const recCoord = getNodeById(msg.recipient)[coord]\n  // console.log(recCoord)\n  const sentCoord = getNodeById(msg.sender)[coord]\n  // console.log(sentCoord)\n  return progress * (recCoord - sentCoord) + sentCoord\n}\n\nvar mint = () => {\n  graph\n  .insert('circle', '.node')\n  .attr('fill', '#7ed321')\n  .attr('cx', d=> nodes[4].x-2)\n  .attr('cy', d=> nodes[4].y)\n  .attr('r', d=> 25)\n  .attr('opacity', d=> 0)\n  .transition()\n  .duration(300)\n  .attr('opacity', d=> 1)\n  .transition()\n  .duration(400)\n  .attr('opacity', d=> 0)\n  .remove()\n\n  graph\n  .append('text')\n  .classed('noselect', true)\n  .attr('font-size', 30)\n  .attr('x', d=> nodes[0].x-30)\n  .attr('y', d=> (nodes[0].y - 30))\n  .text('🐸💰')\n  .attr('opacity', d=> 0)\n  .transition()\n  .duration(300)\n  .attr('opacity', d=> 1)\n  .transition()\n  .duration(400)\n  .attr('opacity', d=> 0)\n  .remove()\n\n}\n\nvar updateMessage = (selection) => {\n  selection\n  .transition()\n  .duration(300)\n  .ease(d3.easeLinear)\n  .attr(\"x\", d => (getMsgPos(d,'x')- 15))\n  .attr(\"y\", d => (getMsgPos(d, 'y')+ 10))\n}\n\nvar exitMessage = (selection) => {\n  if(!selection.size()) return\n  graph\n  .insert('circle', '.node')\n  .attr('fill',\n    (nodes[0].badSpend) ? 'red' :\n    '#7ed321')\n  .attr('cx', d=> nodes[0].x)\n  .attr('cy', d=> nodes[0].y)\n  .attr('r', d=> 33)\n  .attr('opacity', d=> 0)\n  .transition()\n  .duration(400)\n  .attr('opacity', d=> 1)\n  .transition()\n  .duration(400)\n  .attr('opacity', d=> 0)\n  // .ease(d3.easeLinear)\n  // .attr(\"x\", d => (getMsgPos(d,'x')- 15))\n  // .attr(\"y\", d => (getMsgPos(d, 'y')+ 10))\n}\n\n// *****************************************************\n// ** Graph component\n// *****************************************************\n\nclass Graph extends Component {\n    componentDidMount() {\n      graph = d3.select(this.viz);\n      this.d3Graph = d3.select(this.viz);\n    }\n\n    shouldComponentUpdate(nextProps) {\n      nodes = nextProps.nodes\n      const {onClick} = this.props\n      this.d3Graph = d3.select(this.viz);\n      d3.select(this.svg)\n\n      const d3Nodes = this.d3Graph.selectAll('.node')\n        .data(nextProps.nodes, (node) => node.pid);\n      d3Nodes.enter().append('g').call(enterNode)\n      // .on('click', function(d){\n      //   onClick(d, d3.event.pageX, d3.event.pageY)\n      // })\n      d3Nodes.exit().remove();\n      d3Nodes.call(updateNode)\n\n      const d3Links = this.d3Graph.selectAll('.link')\n        .data(nextProps.links)\n\n      d3Links.enter().insert('line', '.node').call(enterLink);\n      d3Links.exit().remove();\n      d3Links.call(updateLink);\n      const d3Messages = this.d3Graph.selectAll('.message')\n        .data(nextProps.messages, message => {\n          return message.message.sig + ':' +\n          message.recipient + ':' +\n          message.sender\n        });\n      const msgEnter = d3Messages.enter().insert('text', '.node').call(enterMessage);\n      d3Messages.exit().call(exitMessage).remove() //remove();\n      d3Messages.merge(msgEnter).call(updateMessage);\n\n      if (minted < this.props.minted) {\n        mint()\n        minted = this.props.minted\n      }\n\n      // we should actually clone the nodes and links\n      // since we're not supposed to directly mutate\n      // props passed in from parent, and d3's force function\n      // mutates the nodes and links array directly\n      // we're bypassing that here for sake of brevity in example\n      return false;\n    }\n\n    render() {\n      return (\n        <svg ref={el => this.svg = el} width={width} height={height}>\n          <g ref={el => this.viz = el} />\n        </svg>\n      );\n    }\n}\n\nexport default Graph;\n","import React from 'react';\nimport { Button} from 'react-bootstrap';\n\nconst Controls = ({spend, disabled}) => {\n\n  return (\n        <Button className=\"spend\" id=\"paypal-spend\" onClick={spend} >\n          Mint $10 to @ribbit\n         </Button>\n  );\n}\n\nexport default Controls;\n","import React, { Component } from 'react';\n\nclass Ledger extends Component {\n\trender() {\n\t\tconst paypal = this.props.paypal\n\t\tconst pid = paypal.pid\n\n\t\tlet users = Object.keys(paypal.state).filter((x) => { return x != pid })\n\n\t\tconst usernames = ['@unicorn', '@tiger', '@hamster', '@ribbit', '@fox', '@koala', '@chicken']\n\n\t\tconst balances = users.map( (x, i) => {\n\t\t\treturn <div className=\"ledger-row\">\n\t\t\t\t\t\t<span className=\"ledger-name\">{usernames[i]}</span>\n\t\t\t\t\t\t<span className=\"ledger-balance\">{'$' + paypal.state[x].balance + '.00'}</span>\n\t\t\t\t\t</div>\n\t\t} )\n\n\t\treturn(\n\t\t\t<div className=\"ledger\">\n\t\t\t\t<div className=\"ledger-row\">\n\t\t\t\t\t<span id=\"venmo-database\">Venmo's Database</span>\n\t\t\t\t</div>\n\t\t\t\t{balances}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Ledger;\n","import React, { Component } from 'react';\nimport {nodes, network} from './createNetSim'\nimport Graph from './Graph.js'\nimport Controls from './Controls.js'\nimport Ledger from './Ledger.js'\nimport * as d3 from 'd3'\n\nconst TICK_LENGTH = 300 //ms\n\n// graph payload (with minimalist structure)\nconst data = {\n  nodes: [],\n  links: []\n}\n\nfor (const node of nodes) {\n  // connect them\n  for (const peer of network.peers[node.pid]) {\n    data.links.push({\n      source: node,\n      target: peer\n    })\n  }\n}\n\n// data.links.push({\n//       source: nodes[2],\n//       target: network.paypal\n//     })\n\n// Venmo\nnodes[0].x = 200\nnodes[0].y = 145\n\nnodes[1].x = 25\nnodes[1].y = 160\n\nnodes[2].x = 330\nnodes[2].y = 270\n\nnodes[3].x = 25\nnodes[3].y = 80\n\nnodes[4].x = 300\nnodes[4].y = 120\n\nnodes[5].x = 360\nnodes[5].y = 160\n\nnodes[6].x = 130\nnodes[6].y = 80\n\nnodes[7].x = 130\nnodes[7].y = 200\n\n\nnodes[0].color = \"#0089FF\"\nnodes[0].img = \"venmo.svg\"\nnodes[1].emoji = '🦄'\nnodes[2].emoji = '🐯'\nnodes[3].emoji = '🐹'\nnodes[4].emoji = '🐸'\nnodes[5].emoji = '🦊'\nnodes[6].emoji = '🐨'\nnodes[7].emoji = '🐔'\n\nclass SandboxOne extends Component {\n  constructor() {\n    super()\n    this.state = {\n      speed: 1,\n      messages: [],\n      minted: 0\n    }\n  }\n\n  componentDidMount() {\n    this.timer = d3.interval(this.tick.bind(this), TICK_LENGTH/this.state.speed);\n    d3.interval(this.randomSpend.bind(this), 2000);\n  }\n\n  randomSpend() {\n    const sender = nodes[Math.floor(Math.random() * (nodes.length-2) + 2)]\n    const receiver = nodes[Math.floor(Math.random() * (nodes.length-1) + 1)]\n    if(sender.pid===receiver.pid) return\n    const tx = sender.generateTx(receiver.pid, 10, 'send')\n    // Broadcast this tx to the network\n    network.broadcast(sender.pid, tx)\n  }\n\n  setMessageQueue(currNetwork){\n    let oldQ = currNetwork.messageQueue\n    const messages = []\n    Object.keys(oldQ).forEach(function(key,index) {\n      for (let message of oldQ[key]) {\n        const newMsg = {...message, time: currNetwork.time}\n        newMsg.recipient = newMsg.recipient.pid\n        messages.push(newMsg)\n      }\n    });\n    return messages\n  }\n\n  tick() {\n    network.tick()\n    const messages = this.setMessageQueue(network)\n    this.setState({messages: messages})\n  }\n\n  getCurrNode(nodeId) {\n    if (network) {\n      return network.agents.find((node) => node.pid === nodeId);\n    }\n  }\n\n  // onClickNode (node, x, y) {\n  //   const {clickedNode} = this.state\n\n  //   if (clickedNode && node.pid === clickedNode.pid) {\n  //     this.setState({clickedNode: null})\n  //   } else {\n  //     this.setState({clickedNode: {...node, clickedX: x, clickedY: y}})\n  //   }\n  // };\n\n  mint(currNode){\n    console.log(currNode)\n\n    const recipient = nodes[4]\n    const tx = currNode.generateTx(recipient.pid, 10, 'mint')\n    // Broadcast this tx to the network\n    currNode.applyTransaction(tx)\n    //TODO copy from createsim.js\n    this.setState({minted: this.state.minted+1})\n  }\n\n  render() {\n    const {messages, speed, minted} = this.state\n    return (\n      <div id=\"sandbox-container\">\n        <Graph\n          nodes={nodes}\n          links={data.links}\n          messages = {messages || []}\n          minted = {minted}\n        />\n        <Ledger\n          paypal = {network.paypal}\n        />\n        <Controls\n          spend={this.mint.bind(this, nodes[0])}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SandboxOne;\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nvar width = '600px';\nvar height = '300px';\n\n// *****************************************************\n// ** d3 functions to manipulate attributes\n// *****************************************************\n\n\n// **** Node Functions  ****\n\nlet nodes\nlet graph\n\n\nvar enterNode = (selection) => {\n  selection.classed('node', true)\n    .append('circle')\n    .attr(\"r\", d => 0)\n    .attr(\"cx\", d=> d.x)\n    .attr(\"cy\", d=> d.y)\n    .attr(\"fill\", d=> d.color)\n\n    selection.append(\"text\")\n      .classed('noselect', true)\n      .attr('font-size', 30)\n      .attr(\"x\", d => (d.x - 17))\n      .attr(\"y\", d=> (d.y +11))\n      .text((d) => {return (d.emoji)})\n\n\n    selection.append(\"svg:image\")\n    .attr(\"xlink:href\", d => d.img)\n    .attr(\"x\", d => (d.x-14))\n    .attr(\"y\", d => (d.y-14))\n    .attr(\"height\", d => d.img ? 28 : 0)\n    .attr(\"width\", d => d.img ? 28 : 0)\n\n};\n\nvar updateNode = (selection) => {\n  selection\n    .attr('fill', (d) => {\n      if (d.pid !== nodes[0].pid) return\n      // console.log('update', d.state)\n      return d.color\n    })\n    .attr('stroke', (d) => d.color)\n    .attr('stroke-width', (d) => 5)\n};\n\n// **** Link Functions  ****\n\nvar enterLink = (selection) => {\n  selection.classed('link', true)\n    .attr(\"stroke-width\", 2)\n    .attr(\"stroke\", 'grey')\n    .attr(\"stroke-dasharray\", (d) => d.source.pid == nodes[1].pid ? 4 : 0)\n    .attr(\"x1\", (d) => d.source.x)\n    .attr(\"y1\", (d) => d.source.y)\n    .attr(\"x2\", (d) => d.target.x)\n    .attr(\"y2\", (d) => d.target.y);\n};\n\nvar updateLink = (selection) => {\n\n};\n\n// **** Message Functions  ****\nvar enterMessage = (selection) => {\n  selection.classed('message', true)\n    .classed('noselect', true)\n    .attr('font-size', 18)\n    .attr(\"x\", d=> (getNodeById(d.sender).x- 15))\n    .attr(\"y\", d=> (getNodeById(d.sender).y + 10))\n    .text('💵')\n    .append('tspan')\n    .text(d=> {\n      console.log(d)\n      return getNodeById(d.message.contents.from).emoji + '➡️' + getNodeById(d.message.contents.to).emoji})\n    .attr('font-size', 9)\n    .attr('dx', -25)\n    .attr('dy', 5)\n\n\n\n    // .attr(\"r\", 6)\n    // .attr(\"fill\", d => '#' + d.message.sig.slice(2,8))\n    // .attr(\"fill-opacity\", 0.5)\n    // .attr('stroke-width', (d) => 3)\n    // .attr('stroke', (d) => '#' + d.message.sig.slice(2,8))\n    // .attr(\"cx\", )\n    // .attr(\"cy\", )\n}\n\nvar getNodeById = (id) => {\n  return nodes.find(\n    (node) => node.pid === id\n  )\n}\n\nconst getMsgPos = (msg, coord) => {\n  const distance = msg.time - msg.sentTime\n  const length = msg.recvTime - msg.sentTime\n  const progress = distance/length\n  const recCoord = getNodeById(msg.recipient)[coord]\n  // console.log(recCoord)\n  const sentCoord = getNodeById(msg.sender)[coord]\n  // console.log(sentCoord)\n  return progress * (recCoord - sentCoord) + sentCoord\n}\n\nvar updateMessage = (selection) => {\n  selection\n  .transition()\n  .duration(300)\n  .ease(d3.easeLinear)\n  .attr(\"x\", d => (getMsgPos(d,'x')- 15))\n  .attr(\"y\", d => (getMsgPos(d, 'y')+ 10))\n}\n\nvar exitMessage = (selection) => {\n  if(!selection.size()) return\n}\n\n// *****************************************************\n// ** Graph component\n// *****************************************************\n\nclass Graph extends Component {\n    componentDidMount() {\n      graph = d3.select(this.viz);\n      this.d3Graph = d3.select(this.viz);\n    }\n\n    shouldComponentUpdate(nextProps) {\n      nodes = nextProps.nodes\n      const {onClick} = this.props\n      this.d3Graph = d3.select(this.viz);\n      d3.select(this.svg)\n\n      const d3Nodes = this.d3Graph.selectAll('.node')\n        .data(nextProps.nodes, (node) => node.pid);\n      d3Nodes.enter().append('g').call(enterNode)\n      // .on('click', function(d){\n      //   onClick(d, d3.event.pageX, d3.event.pageY)\n      // })\n      d3Nodes.exit().remove();\n      d3Nodes.call(updateNode)\n\n      const d3Links = this.d3Graph.selectAll('.link')\n        .data(nextProps.links)\n\n      d3Links.enter().insert('line', '.node').call(enterLink);\n      d3Links.exit().remove();\n      d3Links.call(updateLink);\n      const d3Messages = this.d3Graph.selectAll('.message')\n        .data(nextProps.messages, message => {\n          return message.message.sig + ':' +\n          message.recipient + ':' +\n          message.sender\n        });\n      const msgEnter = d3Messages.enter().insert('text', '.node').call(enterMessage);\n      d3Messages.exit().call(exitMessage).remove() //remove();\n      d3Messages.merge(msgEnter).call(updateMessage);\n\n\n      // we should actually clone the nodes and links\n      // since we're not supposed to directly mutate\n      // props passed in from parent, and d3's force function\n      // mutates the nodes and links array directly\n      // we're bypassing that here for sake of brevity in example\n      return false;\n    }\n\n    render() {\n      return (\n        <svg id=\"world\" ref={el => this.svg = el} width={width} height={height}>\n          <g ref={el => this.viz = el} />\n        </svg>\n      );\n    }\n}\n\nexport default Graph;\n","import React, { Component } from 'react';\nimport {nodes, network} from './createNetSim'\nimport Graph from './Graph.js'\nimport * as d3 from 'd3'\n\nconst TICK_LENGTH = 300 //ms\n\n// graph payload (with minimalist structure)\nconst data = {\n  nodes: [],\n  links: []\n}\n\nfor (const node of nodes) {\n  // connect them\n  for (const peer of network.peers[node.pid]) {\n    data.links.push({\n      source: node,\n      target: peer\n    })\n  }\n}\n\n// data.links.push({\n//       source: nodes[2],\n//       target: network.paypal\n//     })\n\nnodes[0].x = 500\nnodes[0].y = 60\n\nnodes[1].x = 35\nnodes[1].y = 110\n\nnodes[2].x = 460\nnodes[2].y = 140\n\nnodes[3].x = 85\nnodes[3].y = 80\n\nnodes[4].x = 300\nnodes[4].y = 120\n\nnodes[5].x = 360\nnodes[5].y = 50\n\nnodes[6].x = 570\nnodes[6].y = 270\n\nnodes[7].x = 130\nnodes[7].y = 190\n\nnodes[8].x = 337\nnodes[8].y = 270\n\nnodes[9].x = 340\nnodes[9].y = 220\n\nnodes[10].x = 160\nnodes[10].y = 240\n\nnodes[11].x = 530\nnodes[11].y = 110\n\nnodes[12].x = 450\nnodes[12].y = 215\n\nnodes[13].x = 250\nnodes[13].y = 260\n\nnodes[0].emoji = '🐷'\nnodes[1].emoji = '🦄'\nnodes[2].emoji = '🐯'\nnodes[3].emoji = '🐹'\nnodes[4].emoji = '🐸'\nnodes[5].emoji = '🦊'\nnodes[6].emoji = '🐨'\nnodes[7].emoji = '🐔'\nnodes[8].emoji = '🐧'\nnodes[9].emoji = '🦁'\nnodes[10].emoji = '🐵'\nnodes[11].emoji = '🐼'\nnodes[12].emoji = '🦑'\nnodes[13].emoji = '🐬'\n\nclass SandboxFive extends Component {\n  constructor() {\n    super()\n    this.state = {\n      speed: 1,\n      messages: [],\n    }\n  }\n\n  componentDidMount() {\n    this.timer = d3.interval(this.tick.bind(this), TICK_LENGTH/this.state.speed);\n    d3.interval(this.randomSpend.bind(this), 7000);\n  }\n\n  randomSpend() {\n    const sender = nodes[Math.floor(Math.random() * (nodes.length))]\n    const receiver = nodes[Math.floor(Math.random() * (nodes.length))]\n    if(sender.pid===receiver.pid) return\n    const tx = sender.generateTx(receiver.pid, 10, 'send')\n    // Broadcast this tx to the network\n    network.broadcast(sender.pid, tx)\n  }\n\n  setMessageQueue(currNetwork){\n    let oldQ = currNetwork.messageQueue\n    const messages = []\n    Object.keys(oldQ).forEach(function(key,index) {\n      for (let message of oldQ[key]) {\n        const newMsg = {...message, time: currNetwork.time}\n        newMsg.recipient = newMsg.recipient.pid\n        messages.push(newMsg)\n      }\n    });\n    return messages\n  }\n\n  tick() {\n    network.tick()\n    const messages = this.setMessageQueue(network)\n    this.setState({messages: messages})\n  }\n\n  getCurrNode(nodeId) {\n    if (network) {\n      return network.agents.find((node) => node.pid === nodeId);\n    }\n  }\n\n  // onClickNode (node, x, y) {\n  //   const {clickedNode} = this.state\n\n  //   if (clickedNode && node.pid === clickedNode.pid) {\n  //     this.setState({clickedNode: null})\n  //   } else {\n  //     this.setState({clickedNode: {...node, clickedX: x, clickedY: y}})\n  //   }\n  // };\n\n  spend(currNode){\n    console.log(currNode)\n    const node = this.getCurrNode(currNode.pid)\n\n    const recipient = nodes[Math.floor(Math.random() * (nodes.length))]\n    const tx = node.generateTx(recipient.pid, 10, 'send')\n    // Broadcast this tx to the network\n    network.broadcast(node.pid, tx)\n    //TODO copy from createsim.js\n  }\n\n  render() {\n    const {messages, speed} = this.state\n    return (\n      <div id=\"sandbox-container-five\">\n        <Graph\n          nodes={nodes}\n          links={data.links}\n          messages = {messages || []}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SandboxFive;\n","import React from 'react';\nimport '../styles/App.css';\nimport Sandbox from './Sandbox';\nimport SandboxOne from './SandboxOne/SandboxOne';\nimport SandboxTwo from './SandboxTwo/SandboxTwo';\nimport SandboxThree from './SandboxThree/SandboxThree';\nimport SandboxFour from './SandboxFour/SandboxFour';\n\nimport SandboxFive from './SandboxFive/SandboxFive';\n\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n    \t<div id=\"title\">\n\t    \t<h1>\n\t    \t\tWhy Decentralize?\n\t    \t</h1>\n        <h6>Made by <a href=\"http://gokulan.me\">Goki</a> and <a href=\"http://kevinjho.co\">Kevin</a> during ETHDenver 2019</h6>\n    \t</div>\n    \t<p>There’s a lot of talk in the blockchain space about <strong>decentralization</strong>, but what is it about centralization that we wish to undo? Is there really anything wrong with centralized systems?  Let’s dig deeper. We’ll show you what really happens when you (🦄) use a centralized financial system like Venmo or your bank. </p>\n          <br/>\n          <p className=\"helper-text\">Draw a line from yourself to Venmo to join.<br/>Then try sending some money to @tiger!</p>\n        <div className=\"interactive\">\n            <Sandbox/>\n        </div>\n<br/>\n<p>In the real world there are more than 2 users. A centralized payment network looks a bit more like this. </p>\n<br/>\n<p className=\"helper-text\">Send money to a friend!</p>\n<div className=\"interactive\">\n    <SandboxOne/>\n</div>\n\n<p>This is how centralized payment systems work. They’re super efficient and simple. (Our implementation of this Paypal operator is under 200 lines of code!) Having a single powerful server means that you can handle millions of transactions per second. This system is very fast and makes having many users easy. But not everyone can use these systems. 1.7 billion adults, largely in developing countries, remain unbanked.\n </p>\n<br/>\n <p className=\"helper-text\">Try to connect to transact with your friends!</p>\n<div className=\"interactive\">\n    <SandboxTwo/>\n</div>\n\n<br/>\n<p>If you happen to be lucky enough to have been born into a developed country like the United States of Amphibia, then you typically have access to traditional financial systems. These systems are not as impartial as one would hope. Having a single server accept all transactions means that the server has control over which orders get processed. It is possible for specific groups such as the small Unicorn population to have their orders censored by these central operators.</p>\n<br/>\n<p className=\"helper-text\">Try to transact with your friends!</p>\n    <div className=\"interactive\">\n    <SandboxThree/>\n    </div>\n<br/>\n<p>Centralized financial systems are not required to be transparent about their internal processes. Besides censorship, it is possible for other subtler abuses of power. The lack of transparency allows central operators like Wells Frogo to mint arbitrary amounts of money for those at the top. We put a lot of trust in central operators to keep our funds secure, and for banks, we trust that they won't print so much money that everyone's money becomes worthless.</p>\n<br/>\n<p className=\"helper-text\">You're paypal! Click to mint money for frog!</p>\n    <div className=\"interactive\">\n    <SandboxFour/>\n\n    </div>\n    <br/>\n<p>What if we could create an open financial system that doesn’t exclude or censor people, or allow the minting of arbitrary amounts of money? <br/><br/>\n\n1. Anyone should be able to join the network.<br/>\n2. The network should be censorship-resistant.<br/>\n3. More than one entity should be in charge of maintaining balances to prevent minting.<br/><br/>\n\nGood news! Lots of people are learning about and building such networks.</p>\n<br/>\n<p className=\"helper-text\">Part of the solution is what's called a peer-to-peer network, where everyone is connected to each other.</p>\n    <div id=\"interactive-five\">\n    <SandboxFive/>\n    </div>\n<h3 id=\"bottom\">Check out <a href=\"http://cryptoeconomics.study\">cryptoeconomics.study</a> to learn more!</h3>\n\n<img src=\"cryptoecon.png\" id=\"logo\" width=\"100px\"></img>\n\n</div>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nregisterServiceWorker();\n","var EthCrypto = require('eth-crypto')\nvar Client = require('./Client')\n\nclass Paypal extends Client {\n    constructor(network) {\n        super(network)\n        this.transactions = {}\n    }\n    onReceive(tx) {\n        \n        if (this.transactions[tx.sig]) {\n            return;\n        }\n        this.network.broadcast(this.pid, tx)\n        this.applyTransaction(tx)\n        this.transactions[tx.sig] = true\n    }\n\n    applyTransaction(tx) {\n        // verify the signature\n        const validSig = this.verify(\n            tx.sig,\n            this.toHash(tx.contents),\n            tx.contents.from\n        )\n        if (!validSig) {\n            throw new Error('Invalid signature!')\n        }\n        // Check that the nonce is correct for replay protection\n        if (tx.contents.nonce !== this.state[tx.contents.from].nonce + 1) {\n            this.badSpend = true\n            return\n        }\n        // If we don't have a record for this address, create one\n        if (!(tx.contents.to in this.state)) {\n            this.state[tx.contents.to] = {\n                balance: 0,\n                nonce: -1\n            }\n        }\n        // Mint coins **only if identity is PayPal**\n        if (tx.contents.type === 'mint') {\n            if (tx.contents.from !== this.wallet.address) {\n                throw new Error('Non-Paypal Clients can\\'t mint!')\n            }\n            this.state[tx.contents.to].balance += tx.contents.amount\n        } else if (tx.contents.type === 'send') { // Send coins\n            if (this.state[tx.contents.from].balance - tx.contents.amount < 0) {\n                this.badSpend = true\n                this.state[tx.contents.from].nonce++\n                return\n            } else {\n                this.badSpend = false\n            }\n            this.state[tx.contents.from].balance -= tx.contents.amount\n            this.state[tx.contents.to].balance += tx.contents.amount\n        }\n        this.state[tx.contents.from].nonce += 1\n    }\n}\n\nmodule.exports = Paypal;\n","const _ = require('lodash')\nconst d3 = require('d3-random')\nconst seedrandom = require('seedrandom')\n\nclass NetworkSimulator {\n  constructor (latency, packetLoss) {\n    const normalRandom = d3.randomNormal.source(seedrandom('a22ebc7c488a3a47'))(latency, (latency * 2) / 5)\n    this.agents = []\n    this.latency = latency\n    // this.latencyDistribution = () => Math.floor(Math.max(normalRandom(), 0))\n    this.time = 0\n    this.messageQueue = {}\n    this.peers = {}\n    this.packetLoss = packetLoss\n  }\n\n  connectPeer (newPeer, numConnections) {\n    newPeer.network = this\n    const shuffledAgents = _.shuffle(this.agents)\n    this.agents.push(newPeer)\n    this.peers[newPeer.pid] = []\n    for (let a of shuffledAgents.slice(0, numConnections)) {\n      this.peers[newPeer.pid].push(a)\n      this.peers[a.pid].push(newPeer)\n    }\n  }\n\n  connectToPaypal (newPeer, Paypal) {\n    newPeer.network = this\n    this.agents.push(newPeer)\n    this.peers[newPeer.pid] = [Paypal]\n  }\n\n  broadcast (sender, message) {\n    for (let pid of this.peers[sender]) {\n      this.broadcastTo(sender, pid, message)\n    }\n  }\n\n  broadcastTo (sender, receiver, message) {\n    const recvTime = this.time + this.latency\n    if (!(recvTime in this.messageQueue)) {\n      this.messageQueue[recvTime] = []\n    }\n    this.messageQueue[recvTime].push({sender: sender,\n                                     sentTime: this.time,\n                                     recipient: receiver,\n                                     recvTime: recvTime,\n                                     message})\n  }\n\n  tick () {\n    if (this.time in this.messageQueue) {\n      for (let {recipient, message} of this.messageQueue[this.time]) {\n        if (Math.random() > this.packetLoss) {\n          console.log('recipient', recipient)\n          recipient.onReceive(message)\n        }\n      }\n      delete this.messageQueue[this.time]\n    }\n    for (let a of this.agents) {\n      a.tick()\n    }\n    this.time += 1\n  }\n\n  run (steps) {\n    for (let i = 0; i < steps; i++) {\n      this.tick()\n    }\n  }\n}\n\nmodule.exports = NetworkSimulator\n","var EthCrypto = require('eth-crypto')\nvar Client = require('./Client')\n\nclass Paypal extends Client {\n    constructor(network) {\n        super(network)\n        this.state = {\n            [this.wallet.address]: {\n                balance: 0,\n                nonce: -1\n            }\n        }\n        this.transactions = []\n    }\n    onReceive(tx) {\n        this.applyTransaction(tx)\n    }\n\n    applyTransaction(tx) {\n        // verify the signature\n        const validSig = this.verify(\n            tx.sig,\n            this.toHash(tx.contents),\n            tx.contents.from\n        )\n        if (!validSig) {\n            throw new Error('Invalid signature!')\n        }\n        // Check that the nonce is correct for replay protection\n        if (tx.contents.nonce !== this.state[tx.contents.from].nonce + 1) {\n            return\n        }\n        // If we don't have a record for this address, create one\n        if (!(tx.contents.to in this.state)) {\n            this.state[tx.contents.to] = {\n                balance: 0,\n                nonce: -1\n            }\n        }\n        // Mint coins **only if identity is PayPal**\n        if (tx.contents.type === 'mint') {\n            if (tx.contents.from !== this.wallet.address) {\n                throw new Error('Non-Paypal Clients can\\'t mint!')\n            }\n            this.state[tx.contents.to].balance += tx.contents.amount\n        } else if (tx.contents.type === 'send') { // Send coins\n            if (this.state[tx.contents.from].balance - tx.contents.amount < 0) {\n                this.badSpend = true\n                this.state[tx.contents.from].nonce++\n                return\n            } else {\n                this.badSpend = false\n            }\n            this.state[tx.contents.from].balance -= tx.contents.amount\n            this.state[tx.contents.to].balance += tx.contents.amount\n        }\n        this.state[tx.contents.from].nonce += 1\n    }\n}\n\nmodule.exports = Paypal;\n","const _ = require('lodash')\nconst d3 = require('d3-random')\nconst seedrandom = require('seedrandom')\n\nclass NetworkSimulator {\n  constructor (latency, packetLoss) {\n    const normalRandom = d3.randomNormal.source(seedrandom('a22ebc7c488a3a47'))(latency, (latency * 2) / 5)\n    this.agents = []\n    this.latency = latency\n    // this.latencyDistribution = () => Math.floor(Math.max(normalRandom(), 0))\n    this.time = 0\n    this.messageQueue = {}\n    this.peers = {}\n    this.packetLoss = packetLoss\n  }\n\n  connectPeer (newPeer, numConnections) {\n    newPeer.network = this\n    const shuffledAgents = _.shuffle(this.agents)\n    this.agents.push(newPeer)\n    this.peers[newPeer.pid] = []\n    for (let a of shuffledAgents.slice(0, numConnections)) {\n      this.peers[newPeer.pid].push(a)\n      this.peers[a.pid].push(newPeer)\n    }\n  }\n\n  connectToPaypal (newPeer, Paypal) {\n    newPeer.network = this\n    this.agents.push(newPeer)\n    this.peers[newPeer.pid] = [Paypal]\n  }\n\n  broadcast (sender, message) {\n    for (let pid of this.peers[sender]) {\n      this.broadcastTo(sender, pid, message)\n    }\n  }\n\n  broadcastTo (sender, receiver, message) {\n    const recvTime = this.time + this.latency\n    if (!(recvTime in this.messageQueue)) {\n      this.messageQueue[recvTime] = []\n    }\n    this.messageQueue[recvTime].push({sender: sender,\n                                     sentTime: this.time,\n                                     recipient: receiver,\n                                     recvTime: recvTime,\n                                     message})\n  }\n\n  tick () {\n    if (this.time in this.messageQueue) {\n      for (let {recipient, message} of this.messageQueue[this.time]) {\n        if (Math.random() > this.packetLoss) {\n          recipient.onReceive(message)\n        }\n      }\n      delete this.messageQueue[this.time]\n    }\n    for (let a of this.agents) {\n      a.tick()\n    }\n    this.time += 1\n  }\n\n  run (steps) {\n    for (let i = 0; i < steps; i++) {\n      this.tick()\n    }\n  }\n}\n\nmodule.exports = NetworkSimulator\n","var EthCrypto = require('eth-crypto')\nvar Client = require('./Client')\n\nclass Paypal extends Client {\n    constructor(network) {\n        super(network)\n        this.state = {\n            [this.wallet.address]: {\n                balance: 0,\n                nonce: -1\n            }\n        }\n        this.transactions = []\n    }\n    onReceive(tx) {\n        this.applyTransaction(tx)\n    }\n\n    applyTransaction(tx) {\n        // verify the signature\n        const validSig = this.verify(\n            tx.sig,\n            this.toHash(tx.contents),\n            tx.contents.from\n        )\n        if (!validSig) {\n            throw new Error('Invalid signature!')\n        }\n        // Check that the nonce is correct for replay protection\n        if (tx.contents.nonce !== this.state[tx.contents.from].nonce + 1) {\n            this.badSpend = true\n            return\n        }\n        // If we don't have a record for this address, create one\n        if (!(tx.contents.to in this.state)) {\n            this.state[tx.contents.to] = {\n                balance: 0,\n                nonce: -1\n            }\n        }\n        // Mint coins **only if identity is PayPal**\n        if (tx.contents.type === 'mint') {\n            if (tx.contents.from !== this.wallet.address) {\n                throw new Error('Non-Paypal Clients can\\'t mint!')\n            }\n            this.state[tx.contents.to].balance += tx.contents.amount\n        } else if (tx.contents.type === 'send') { // Send coins\n            if (this.state[tx.contents.from].balance - tx.contents.amount < 0) {\n                this.badSpend = true\n                this.state[tx.contents.from].nonce++\n                return\n            } else {\n                this.badSpend = false\n            }\n            this.state[tx.contents.from].balance -= tx.contents.amount\n            this.state[tx.contents.to].balance += tx.contents.amount\n        }\n        this.state[tx.contents.from].nonce += 1\n    }\n}\n\nmodule.exports = Paypal;\n","const _ = require('lodash')\nconst d3 = require('d3-random')\nconst seedrandom = require('seedrandom')\n\nclass NetworkSimulator {\n  constructor (latency, packetLoss) {\n    const normalRandom = d3.randomNormal.source(seedrandom('a22ebc7c488a3a47'))(latency, (latency * 2) / 5)\n    this.agents = []\n    this.latency = latency\n    // this.latencyDistribution = () => Math.floor(Math.max(normalRandom(), 0))\n    this.time = 0\n    this.messageQueue = {}\n    this.peers = {}\n    this.packetLoss = packetLoss\n  }\n\n  connectPeer (newPeer, numConnections) {\n    newPeer.network = this\n    const shuffledAgents = _.shuffle(this.agents)\n    this.agents.push(newPeer)\n    this.peers[newPeer.pid] = []\n    for (let a of shuffledAgents.slice(0, numConnections)) {\n      this.peers[newPeer.pid].push(a)\n      this.peers[a.pid].push(newPeer)\n    }\n  }\n\n  connectToPaypal (newPeer, Paypal) {\n    newPeer.network = this\n    this.agents.push(newPeer)\n    this.peers[newPeer.pid] = [Paypal]\n  }\n\n  broadcast (sender, message) {\n    for (let pid of this.peers[sender]) {\n      this.broadcastTo(sender, pid, message)\n    }\n  }\n\n  broadcastTo (sender, receiver, message) {\n    const recvTime = this.time + this.latency\n    if (!(recvTime in this.messageQueue)) {\n      this.messageQueue[recvTime] = []\n    }\n    this.messageQueue[recvTime].push({sender: sender,\n                                     sentTime: this.time,\n                                     recipient: receiver,\n                                     recvTime: recvTime,\n                                     message})\n  }\n\n  tick () {\n    if (this.time in this.messageQueue) {\n      for (let {recipient, message} of this.messageQueue[this.time]) {\n        if (Math.random() > this.packetLoss) {\n          console.log('recipient', recipient)\n          recipient.onReceive(message)\n        }\n      }\n      delete this.messageQueue[this.time]\n    }\n    for (let a of this.agents) {\n      a.tick()\n    }\n    this.time += 1\n  }\n\n  run (steps) {\n    for (let i = 0; i < steps; i++) {\n      this.tick()\n    }\n  }\n}\n\nmodule.exports = NetworkSimulator\n","var EthCrypto = require('eth-crypto')\nvar Client = require('./Client')\n\nclass Paypal extends Client {\n    constructor(network) {\n        super(network)\n        this.state = {\n            [this.wallet.address]: {\n                balance: 0,\n                nonce: -1\n            }\n        }\n        this.transactions = []\n    }\n    onReceive(tx) {\n        this.applyTransaction(tx)\n    }\n\n    applyTransaction(tx) {\n        // verify the signature\n        const validSig = this.verify(\n            tx.sig,\n            this.toHash(tx.contents),\n            tx.contents.from\n        )\n        if (!validSig) {\n            throw new Error('Invalid signature!')\n        }\n        // Check that the nonce is correct for replay protection\n        if (tx.contents.nonce !== this.state[tx.contents.from].nonce + 1) {\n            return\n        }\n        // If we don't have a record for this address, create one\n        if (!(tx.contents.to in this.state)) {\n            this.state[tx.contents.to] = {\n                balance: 0,\n                nonce: -1\n            }\n        }\n        // Mint coins **only if identity is PayPal**\n        if (tx.contents.type === 'mint') {\n            if (tx.contents.from !== this.wallet.address) {\n                throw new Error('Non-Paypal Clients can\\'t mint!')\n            }\n            this.state[tx.contents.to].balance += tx.contents.amount\n        } else if (tx.contents.type === 'send') { // Send coins\n            if (this.state[tx.contents.from].balance - tx.contents.amount < 0) {\n                this.badSpend = true\n                return\n            } else {\n                this.badSpend = false\n            }\n            this.state[tx.contents.from].balance -= tx.contents.amount\n            this.state[tx.contents.to].balance += tx.contents.amount\n        }\n        this.state[tx.contents.from].nonce += 1\n    }\n}\n\nmodule.exports = Paypal;\n","const _ = require('lodash')\nconst d3 = require('d3-random')\nconst seedrandom = require('seedrandom')\n\nclass NetworkSimulator {\n  constructor (latency, packetLoss) {\n    const normalRandom = d3.randomNormal.source(seedrandom('a22ebc7c488a3a47'))(latency, (latency * 2) / 5)\n    this.agents = []\n    this.latency = latency\n    // this.latencyDistribution = () => Math.floor(Math.max(normalRandom(), 0))\n    this.time = 0\n    this.messageQueue = {}\n    this.peers = {}\n    this.packetLoss = packetLoss\n  }\n\n  connectPeer (newPeer, numConnections) {\n    newPeer.network = this\n    const shuffledAgents = _.shuffle(this.agents)\n    this.agents.push(newPeer)\n    this.peers[newPeer.pid] = []\n    for (let a of shuffledAgents.slice(0, numConnections)) {\n      this.peers[newPeer.pid].push(a)\n      this.peers[a.pid].push(newPeer)\n    }\n  }\n\n  connectToPaypal (newPeer, Paypal) {\n    newPeer.network = this\n    this.agents.push(newPeer)\n    this.peers[newPeer.pid] = [Paypal]\n  }\n\n  broadcast (sender, message) {\n    for (let pid of this.peers[sender]) {\n      this.broadcastTo(sender, pid, message)\n    }\n  }\n\n  broadcastTo (sender, receiver, message) {\n    const recvTime = this.time + this.latency\n    if (!(recvTime in this.messageQueue)) {\n      this.messageQueue[recvTime] = []\n    }\n    this.messageQueue[recvTime].push({sender: sender,\n                                     sentTime: this.time,\n                                     recipient: receiver,\n                                     recvTime: recvTime,\n                                     message})\n  }\n\n  tick () {\n    if (this.time in this.messageQueue) {\n      for (let {recipient, message} of this.messageQueue[this.time]) {\n        if (Math.random() > this.packetLoss) {\n          console.log('recipient', recipient)\n          recipient.onReceive(message)\n        }\n      }\n      delete this.messageQueue[this.time]\n    }\n    for (let a of this.agents) {\n      a.tick()\n    }\n    this.time += 1\n  }\n\n  run (steps) {\n    for (let i = 0; i < steps; i++) {\n      this.tick()\n    }\n  }\n}\n\nmodule.exports = NetworkSimulator\n","var EthCrypto = require('eth-crypto')\nvar Client = require('./Client')\n\nclass Paypal extends Client {\n    constructor(network) {\n        super(network)\n        this.state = {\n            [this.wallet.address]: {\n                balance: 0,\n                nonce: -1\n            }\n        }\n        this.transactions = []\n    }\n    onReceive(tx) {\n        this.applyTransaction(tx)\n    }\n\n    applyTransaction(tx) {\n        // verify the signature\n        const validSig = this.verify(\n            tx.sig,\n            this.toHash(tx.contents),\n            tx.contents.from\n        )\n        if (!validSig) {\n            throw new Error('Invalid signature!')\n        }\n        // Check that the nonce is correct for replay protection\n        if (tx.contents.nonce !== this.state[tx.contents.from].nonce + 1) {\n            return\n        }\n        // If we don't have a record for this address, create one\n        if (!(tx.contents.to in this.state)) {\n            this.state[tx.contents.to] = {\n                balance: 0,\n                nonce: -1\n            }\n        }\n        // Mint coins **only if identity is PayPal**\n        if (tx.contents.type === 'mint') {\n            if (tx.contents.from !== this.wallet.address) {\n                throw new Error('Non-Paypal Clients can\\'t mint!')\n            }\n            this.state[tx.contents.to].balance += tx.contents.amount\n        } else if (tx.contents.type === 'send') { // Send coins\n            if (this.state[tx.contents.from].balance - tx.contents.amount < 0) {\n                this.badSpend = true\n                this.state[tx.contents.from].nonce++\n                return\n            } else {\n                this.badSpend = false\n            }\n            this.state[tx.contents.from].balance -= tx.contents.amount\n            this.state[tx.contents.to].balance += tx.contents.amount\n        }\n        this.state[tx.contents.from].nonce += 1\n    }\n}\n\nmodule.exports = Paypal;\n","const _ = require('lodash')\nconst d3 = require('d3-random')\nconst seedrandom = require('seedrandom')\n\nclass NetworkSimulator {\n  constructor (latency, packetLoss) {\n    const normalRandom = d3.randomNormal.source(seedrandom('a22ebc7c488a3a47'))(latency, (latency * 2) / 5)\n    this.agents = []\n    this.latency = latency\n    // this.latencyDistribution = () => Math.floor(Math.max(normalRandom(), 0))\n    this.time = 0\n    this.messageQueue = {}\n    this.peers = {}\n    this.packetLoss = packetLoss\n  }\n\n  connectPeer (newPeer, numConnections) {\n    newPeer.network = this\n    const shuffledAgents = _.shuffle(this.agents)\n    this.agents.push(newPeer)\n    this.peers[newPeer.pid] = []\n    for (let a of shuffledAgents.slice(0, numConnections)) {\n      this.peers[newPeer.pid].push(a)\n      this.peers[a.pid].push(newPeer)\n    }\n  }\n\n  connectToPaypal (newPeer, Paypal) {\n    newPeer.network = this\n    this.agents.push(newPeer)\n    this.peers[newPeer.pid] = [Paypal]\n  }\n\n  broadcast (sender, message) {\n    for (let pid of this.peers[sender]) {\n      this.broadcastTo(sender, pid, message)\n    }\n  }\n\n  broadcastTo (sender, receiver, message) {\n    const recvTime = this.time + this.latency\n    if (!(recvTime in this.messageQueue)) {\n      this.messageQueue[recvTime] = []\n    }\n    this.messageQueue[recvTime].push({sender: sender,\n                                     sentTime: this.time,\n                                     recipient: receiver,\n                                     recvTime: recvTime,\n                                     message})\n  }\n\n  tick () {\n    if (this.time in this.messageQueue) {\n      for (let {recipient, message} of this.messageQueue[this.time]) {\n        if (Math.random() > this.packetLoss) {\n          console.log('recipient', recipient)\n          recipient.onReceive(message)\n        }\n      }\n      delete this.messageQueue[this.time]\n    }\n    for (let a of this.agents) {\n      a.tick()\n    }\n    this.time += 1\n  }\n\n  run (steps) {\n    for (let i = 0; i < steps; i++) {\n      this.tick()\n    }\n  }\n}\n\nmodule.exports = NetworkSimulator\n","var EthCrypto = require('eth-crypto')\nvar NetworkSimulator = require('./networksim')\nvar Client = require('./Client')\nvar Paypal = require('./Paypal')\nvar util = require('util')\n\n// ****** Test this out using a simulated network ****** //\nconst numNodes = 13\nconst network = new NetworkSimulator(10, 0);\nconst nodes = []\n\n// Create new nodes based on our wallets, and connect them to the network/\nfor (let i = 0; i <= numNodes; i++) {\n  nodes.push(new Paypal(network))\n  network.connectPeer(nodes[i], Math.random() > 0.5 ? 2 : 1)\n}\n\n// console.log(paypal.state)\nlet state = {}\nfor (var i = nodes.length - 1; i >= 0; i--) {\n\tstate[nodes[i].wallet.address] = {\n\t\t\t                balance: 100,\n\t\t\t                nonce: -1\n            \t\t\t  }\n        \n}\n\nfor (var i = nodes.length - 1; i >= 0; i--) {\n\tnodes[i].state = state\n}\n// for (let i = 0; i < 3; i ++) {\n// console.log(network.peers[nodes[i].pid].length)\n// }\n// const tx1 = nodes[1].generateTx(nodes[2].pid, 14, 'send')\n// network.broadcastTo(nodes[1].pid, nodes[0], tx1)\nnetwork.run(100)\nmodule.exports = {nodes, network}\n","var EthCrypto = require('eth-crypto')\nvar Client = require('./Client')\n\nclass Paypal extends Client {\n    constructor(network) {\n        super(network)\n        this.state = {\n            [this.wallet.address]: {\n                balance: 0,\n                nonce: -1\n            }\n        }\n        this.transactions = []\n    }\n    onReceive(tx) {\n        this.applyTransaction(tx)\n    }\n\n    applyTransaction(tx) {\n        // verify the signature\n        const validSig = this.verify(\n            tx.sig,\n            this.toHash(tx.contents),\n            tx.contents.from\n        )\n        if (!validSig) {\n            throw new Error('Invalid signature!')\n        }\n        // Check that the nonce is correct for replay protection\n        if (tx.contents.nonce !== this.state[tx.contents.from].nonce + 1) {\n            return\n        }\n        // If we don't have a record for this address, create one\n        if (!(tx.contents.to in this.state)) {\n            this.state[tx.contents.to] = {\n                balance: 0,\n                nonce: -1\n            }\n        }\n        // Mint coins **only if identity is PayPal**\n        if (tx.contents.type === 'mint') {\n            if (tx.contents.from !== this.wallet.address) {\n                throw new Error('Non-Paypal Clients can\\'t mint!')\n            }\n            this.state[tx.contents.to].balance += tx.contents.amount\n        } else if (tx.contents.type === 'send') { // Send coins\n            if (this.state[tx.contents.from].balance - tx.contents.amount < 0) {\n                this.badSpend = true\n                return\n            } else {\n                this.badSpend = false\n            }\n            this.state[tx.contents.from].balance -= tx.contents.amount\n            this.state[tx.contents.to].balance += tx.contents.amount\n        }\n        this.state[tx.contents.from].nonce += 1\n    }\n}\n\nmodule.exports = Paypal;\n","const _ = require('lodash')\nconst d3 = require('d3-random')\nconst seedrandom = require('seedrandom')\n\nclass NetworkSimulator {\n  constructor (latency, packetLoss) {\n    const normalRandom = d3.randomNormal.source(seedrandom('a22ebc7c488a3a47'))(latency, (latency * 2) / 5)\n    this.agents = []\n    this.latency = latency\n    // this.latencyDistribution = () => Math.floor(Math.max(normalRandom(), 0))\n    this.time = 0\n    this.messageQueue = {}\n    this.peers = {}\n    this.packetLoss = packetLoss\n  }\n\n  connectPeer (newPeer, numConnections) {\n    newPeer.network = this\n    const shuffledAgents = _.shuffle(this.agents)\n    this.agents.push(newPeer)\n    this.peers[newPeer.pid] = []\n    for (let a of shuffledAgents.slice(0, numConnections)) {\n      this.peers[newPeer.pid].push(a)\n      this.peers[a.pid].push(newPeer)\n    }\n  }\n\n  connectToPaypal (newPeer, Paypal) {\n    newPeer.network = this\n    this.agents.push(newPeer)\n    this.peers[newPeer.pid] = [Paypal]\n  }\n\n  broadcast (sender, message) {\n    for (let pid of this.peers[sender]) {\n      this.broadcastTo(sender, pid, message)\n    }\n  }\n\n  broadcastTo (sender, receiver, message) {\n    const recvTime = this.time + this.latency\n    if (!(recvTime in this.messageQueue)) {\n      this.messageQueue[recvTime] = []\n    }\n    this.messageQueue[recvTime].push({sender: sender,\n                                     sentTime: this.time,\n                                     recipient: receiver,\n                                     recvTime: recvTime,\n                                     message})\n  }\n\n  tick () {\n    if (this.time in this.messageQueue) {\n      for (let {recipient, message} of this.messageQueue[this.time]) {\n        if (Math.random() > this.packetLoss) {\n          console.log('recipient', recipient)\n          recipient.onReceive(message)\n        }\n      }\n      delete this.messageQueue[this.time]\n    }\n    for (let a of this.agents) {\n      a.tick()\n    }\n    this.time += 1\n  }\n\n  run (steps) {\n    for (let i = 0; i < steps; i++) {\n      this.tick()\n    }\n  }\n}\n\nmodule.exports = NetworkSimulator\n","var EthCrypto = require('eth-crypto')\nvar NetworkSimulator = require('./networksim')\nvar Client = require('./Client')\nvar Paypal = require('./Paypal')\nvar util = require('util')\n\n// ****** Test this out using a simulated network ****** //\nconst numNodes = 7\nconst network = new NetworkSimulator(10, 0);\nconst nodes = []\n// Create new nodes based on our wallets, and connect them to the network\n\nconst paypal = new Paypal(network);\n\n// I want a reference to paypal\nnetwork.paypal = paypal\n\nnetwork.peers[paypal.pid] = []\n\nnodes.push(paypal)\nfor (let i = 1; i <= numNodes; i++) {\n  nodes.push(new Client(network))\n  network.connectToPaypal(nodes[i], paypal)\n}\n\nnodes[1].nonce = 420\n\nconsole.log(network.peers)\n// console.log(paypal.state)\nconst amounts = [38, 98, 28, 76, 12, 86, 89]\nfor (let i = 1; i <=numNodes; i++) {\n  const tx = nodes[0].generateTx(nodes[i].pid, amounts[i-1], 'mint')\n  nodes[0].applyTransaction(tx)\n}\n// for (let i = 0; i < 3; i ++) {\n// console.log(network.peers[nodes[i].pid].length)\n// }\n// const tx1 = nodes[1].generateTx(nodes[2].pid, 14, 'send')\n// network.broadcastTo(nodes[1].pid, nodes[0], tx1)\nnetwork.run(100)\nconsole.log('state',paypal.state)\nmodule.exports = {nodes, network}\n","var EthCrypto = require('eth-crypto')\nvar NetworkSimulator = require('./networksim')\nvar Client = require('./Client')\nvar Paypal = require('./Paypal')\nvar util = require('util')\n\n// ****** Test this out using a simulated network ****** //\nconst numNodes = 7\nconst network = new NetworkSimulator(10, 0);\nconst nodes = []\n// Create new nodes based on our wallets, and connect them to the network\n\nconst paypal = new Paypal(network);\n\n// I want a reference to paypal\nnetwork.paypal = paypal\n\nnetwork.peers[paypal.pid] = []\n\nnodes.push(paypal)\nfor (let i = 1; i <= numNodes; i++) {\n  nodes.push(new Client(network))\n  network.connectToPaypal(nodes[i], paypal)\n}\nconsole.log(network.peers)\n// console.log(paypal.state)\nconst amounts = [38, 98, 28, 76, 12, 86, 89]\nfor (let i = 1; i <=numNodes; i++) {\n  const tx = nodes[0].generateTx(nodes[i].pid, amounts[i-1], 'mint')\n  nodes[0].applyTransaction(tx)\n}\n// for (let i = 0; i < 3; i ++) {\n// console.log(network.peers[nodes[i].pid].length)\n// }\n// const tx1 = nodes[1].generateTx(nodes[2].pid, 14, 'send')\n// network.broadcastTo(nodes[1].pid, nodes[0], tx1)\nnetwork.run(100)\nconsole.log('state',paypal.state)\nmodule.exports = {nodes, network}\n","var EthCrypto = require('eth-crypto')\nvar NetworkSimulator = require('./networksim')\nvar Client = require('./Client')\nvar Paypal = require('./Paypal')\nvar util = require('util')\n\n// ****** Test this out using a simulated network ****** //\nconst numNodes = 7\nconst network = new NetworkSimulator(10, 0);\nconst nodes = []\n// Create new nodes based on our wallets, and connect them to the network\n\nconst paypal = new Paypal(network);\n\n// I want a reference to paypal\nnetwork.paypal = paypal\n\nnetwork.peers[paypal.pid] = []\n\n\nnodes.push(paypal)\nfor (let i = 1; i <= numNodes; i++) {\n  nodes.push(new Client(network))\n if(i>=2) network.connectToPaypal(nodes[i], paypal)\n}\nnetwork.peers[nodes[1].pid] = []\nconsole.log(network.peers)\n// console.log(paypal.state)\nconst amounts = [38, 98, 28, 76, 12, 86, 89]\nfor (let i = 1; i <=numNodes; i++) {\n  const tx = nodes[0].generateTx(nodes[i].pid, amounts[i-1], 'mint')\n  nodes[0].applyTransaction(tx)\n}\n// for (let i = 0; i < 3; i ++) {\n// console.log(network.peers[nodes[i].pid].length)\n// }\n// const tx1 = nodes[1].generateTx(nodes[2].pid, 14, 'send')\n// network.broadcastTo(nodes[1].pid, nodes[0], tx1)\nnetwork.run(100)\nconsole.log('state',paypal.state)\nmodule.exports = {nodes, network}\n","var EthCrypto = require('eth-crypto')\nvar NetworkSimulator = require('./networksim')\nvar Client = require('./Client')\nvar Paypal = require('./Paypal')\nvar util = require('util')\n\n// ****** Test this out using a simulated network ****** //\nconst numNodes = 7\nconst network = new NetworkSimulator(10, 0);\nconst nodes = []\n// Create new nodes based on our wallets, and connect them to the network\n\nconst paypal = new Paypal(network);\n\n// I want a reference to paypal\nnetwork.paypal = paypal\n\nnetwork.peers[paypal.pid] = []\n\nnodes.push(paypal)\nfor (let i = 1; i <= numNodes; i++) {\n  nodes.push(new Client(network))\n  network.connectToPaypal(nodes[i], paypal)\n}\nconsole.log(network.peers)\n// console.log(paypal.state)\nconst amounts = [38, 98, 28, 76, 12, 86, 89]\nfor (let i = 1; i <=numNodes; i++) {\n  const tx = nodes[0].generateTx(nodes[i].pid, amounts[i-1], 'mint')\n  nodes[0].applyTransaction(tx)\n}\n// for (let i = 0; i < 3; i ++) {\n// console.log(network.peers[nodes[i].pid].length)\n// }\n// const tx1 = nodes[1].generateTx(nodes[2].pid, 14, 'send')\n// network.broadcastTo(nodes[1].pid, nodes[0], tx1)\nnetwork.run(100)\nconsole.log('state',paypal.state)\nmodule.exports = {nodes, network}\n","var EthCrypto = require('eth-crypto')\n\nclass Client {\n    constructor(network) {\n        this.wallet = EthCrypto.createIdentity()\n        this.nonce = -1;\n        this.network = network\n        this.pid = this.wallet.address\n    }\n\n    toHash(data) {\n        const dataStr = JSON.stringify(data)\n        return EthCrypto.hash.keccak256(dataStr)\n    }\n\n    sign(message) {\n        const messageHash = this.toHash(message)\n        return EthCrypto.sign(\n            this.wallet.privateKey,\n            messageHash\n        )\n    }\n\n    verify(signature, messageHash, address) {\n        const signer = EthCrypto.recover(signature, messageHash)\n        return signer === address\n    }\n\n    generateTx(to, amount, type) {\n        const unsignedTx = {\n            type: type,\n            amount: amount,\n            from: this.wallet.address,\n            to: to,\n            nonce: ++this.nonce\n        }\n        const tx = {\n            contents: unsignedTx,\n            sig: this.sign(unsignedTx)\n        }\n        return tx\n    }\n    tick() {}\n}\n\nmodule.exports = Client\n\n","var EthCrypto = require('eth-crypto')\n\nclass Client {\n    constructor(network) {\n        this.wallet = EthCrypto.createIdentity()\n        this.nonce = -1;\n        this.network = network\n        this.pid = this.wallet.address\n    }\n\n    toHash(data) {\n        const dataStr = JSON.stringify(data)\n        return EthCrypto.hash.keccak256(dataStr)\n    }\n\n    sign(message) {\n        const messageHash = this.toHash(message)\n        return EthCrypto.sign(\n            this.wallet.privateKey,\n            messageHash\n        )\n    }\n\n    verify(signature, messageHash, address) {\n        const signer = EthCrypto.recover(signature, messageHash)\n        return signer === address\n    }\n\n    generateTx(to, amount, type) {\n        const unsignedTx = {\n            type: type,\n            amount: amount,\n            from: this.wallet.address,\n            to: to,\n            nonce: ++this.nonce\n        }\n        const tx = {\n            contents: unsignedTx,\n            sig: this.sign(unsignedTx)\n        }\n        return tx\n    }\n    tick() {}\n}\n\nmodule.exports = Client\n\n","var EthCrypto = require('eth-crypto')\n\nclass Client {\n    constructor(network) {\n        this.wallet = EthCrypto.createIdentity()\n        this.nonce = -1;\n        this.network = network\n        this.pid = this.wallet.address\n    }\n\n    toHash(data) {\n        const dataStr = JSON.stringify(data)\n        return EthCrypto.hash.keccak256(dataStr)\n    }\n\n    sign(message) {\n        const messageHash = this.toHash(message)\n        return EthCrypto.sign(\n            this.wallet.privateKey,\n            messageHash\n        )\n    }\n\n    verify(signature, messageHash, address) {\n        const signer = EthCrypto.recover(signature, messageHash)\n        return signer === address\n    }\n\n    generateTx(to, amount, type) {\n        const unsignedTx = {\n            type: type,\n            amount: amount,\n            from: this.wallet.address,\n            to: to,\n            nonce: ++this.nonce\n        }\n        const tx = {\n            contents: unsignedTx,\n            sig: this.sign(unsignedTx)\n        }\n        return tx\n    }\n    tick() {}\n}\n\nmodule.exports = Client\n\n","var EthCrypto = require('eth-crypto')\n\nclass Client {\n    constructor(network) {\n        this.wallet = EthCrypto.createIdentity()\n        this.nonce = -1;\n        this.network = network\n        this.pid = this.wallet.address\n    }\n\n    toHash(data) {\n        const dataStr = JSON.stringify(data)\n        return EthCrypto.hash.keccak256(dataStr)\n    }\n\n    sign(message) {\n        const messageHash = this.toHash(message)\n        return EthCrypto.sign(\n            this.wallet.privateKey,\n            messageHash\n        )\n    }\n\n    verify(signature, messageHash, address) {\n        const signer = EthCrypto.recover(signature, messageHash)\n        return signer === address\n    }\n\n    generateTx(to, amount, type) {\n        const unsignedTx = {\n            type: type,\n            amount: amount,\n            from: this.wallet.address,\n            to: to,\n            nonce: ++this.nonce\n        }\n        const tx = {\n            contents: unsignedTx,\n            sig: this.sign(unsignedTx)\n        }\n        return tx\n    }\n    tick() {}\n}\n\nmodule.exports = Client\n\n","var EthCrypto = require('eth-crypto')\n\nclass Client {\n    constructor(network) {\n        this.wallet = EthCrypto.createIdentity()\n        this.nonce = -1;\n        this.network = network\n        this.pid = this.wallet.address\n    }\n\n    toHash(data) {\n        const dataStr = JSON.stringify(data)\n        return EthCrypto.hash.keccak256(dataStr)\n    }\n\n    sign(message) {\n        const messageHash = this.toHash(message)\n        return EthCrypto.sign(\n            this.wallet.privateKey,\n            messageHash\n        )\n    }\n\n    verify(signature, messageHash, address) {\n        const signer = EthCrypto.recover(signature, messageHash)\n        return signer === address\n    }\n\n    generateTx(to, amount, type) {\n        const unsignedTx = {\n            type: type,\n            amount: amount,\n            from: this.wallet.address,\n            to: to,\n            nonce: ++this.nonce\n        }\n        const tx = {\n            contents: unsignedTx,\n            sig: this.sign(unsignedTx)\n        }\n        return tx\n    }\n    tick() {}\n}\n\nmodule.exports = Client\n\n"],"sourceRoot":""}